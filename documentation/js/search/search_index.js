var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccountVerifyDto.html",[0,0.232,1,2.732]],["body/classes/AccountVerifyDto.html",[0,0.341,1,4.019,2,0.745,3,0.207,4,0.207,5,0.155,6,5.06,7,3.432,8,0.35,9,1.1,10,3.009,11,4.496,12,5.06,13,0.422,14,0.02,15,0.646,16,1.228,17,1.521,18,1.809,19,3.675,20,3.53,21,1.645,22,5.379,23,1.715,24,3.341,25,1.521,26,2.534,27,1.809,28,0.63,29,4.013,30,2.819,31,4.524,32,3.341,33,3.432,34,4.013,35,0.309,36,1.613,37,0.983,38,2.652,39,2.652,40,1.6,41,0.207,42,1.296,43,3.049,44,1.228,45,2.344,46,0.015,47,0.015]],["title/controllers/AppController.html",[48,2.732,49,2.476]],["body/controllers/AppController.html",[0,0.283,3,0.29,4,0.227,5,0.17,8,0.383,13,0.35,14,0.021,15,0.576,16,1.019,28,0.523,35,0.381,37,1.076,41,0.227,44,1.302,46,0.016,47,0.016,48,4.261,49,3.862,50,3.024,51,3.756,52,2.114,53,5.609,54,4.392,55,3.103,56,4.392,57,1.566,58,1.076,59,1.332,60,6.18,61,1.566,62,2.237,63,1.855,64,2.237,65,5.609,66,3.049,67,1.076,68,5.609,69,3.024,70,4.261,71,4.392,72,1.969,73,4.392,74,1.751,75,1.406,76,3.756,77,4.392,78,4.392]],["title/modules/AppModule.html",[79,1.215,80,2.476]],["body/modules/AppModule.html",[0,0.249,3,0.199,4,0.199,5,0.149,14,0.021,35,0.408,41,0.199,46,0.014,47,0.014,49,3.994,50,3.547,67,0.945,75,1.234,79,1.959,80,4.926,81,1.728,82,1.838,83,2.096,84,2.096,85,1.838,86,2.801,87,1.959,88,3.298,89,3.298,90,4.193,91,4.193,92,3.878,93,4.193,94,2.801,95,1.234,96,1.538,97,3.856,98,3.01,99,3.856,100,1.728,101,5.152,102,3.298,103,5.152,104,3.856,105,3.298,106,3.856,107,3.856,108,3.856,109,3.856,110,3.856,111,3.856,112,3.856,113,3.856,114,3.856,115,3.856,116,2.93,117,3.856,118,3.856,119,2.93,120,3.856,121,1.959,122,3.856]],["title/modules/AuthModule.html",[79,1.215,90,2.271]],["body/modules/AuthModule.html",[0,0.197,3,0.158,4,0.158,5,0.118,14,0.021,20,2.226,21,1.073,30,1.963,35,0.393,41,0.158,42,0.748,46,0.012,47,0.012,50,3.016,67,0.748,79,2.003,81,1.368,82,1.455,83,1.659,84,1.659,85,1.455,86,2.786,87,1.551,90,4.513,94,2.381,95,1.64,96,1.217,98,2.559,123,2.61,124,2.61,125,2.61,126,3.898,127,3.898,128,4.689,129,3.898,130,3.898,131,3.898,132,3.898,133,3.052,134,3.044,135,4.381,136,4.381,137,5.6,138,5.6,139,4.381,140,3.328,141,2.381,142,2.088,143,2.845,144,5.6,145,3.328,146,1.85,147,2.381,148,2.088,149,4.381,150,1.329,151,4.381,152,4.381,153,4.381,154,3.746,155,4.381,156,4.381,157,4.381,158,4.381,159,4.381,160,3.016,161,4.381,162,4.381,163,2.559,164,2.381,165,4.381,166,4.382,167,3.052,168,2.61,169,3.052,170,3.052,171,3.052,172,3.052,173,3.052,174,3.052,175,4.381,176,3.052,177,3.052,178,3.052]],["title/classes/AuthTokensDto.html",[0,0.232,179,1.955]],["body/classes/AuthTokensDto.html",[0,0.355,2,0.473,3,0.132,4,0.132,5,0.099,8,0.222,9,0.798,13,0.439,14,0.021,15,0.635,16,0.891,17,1.104,18,1.584,20,2.345,21,1.471,23,1.756,25,1.477,27,0.733,28,0.457,30,2.469,35,0.149,36,1.846,37,0.625,41,0.285,42,1.739,44,1.434,46,0.011,47,0.011,62,2.196,63,2.169,64,1.84,75,1.643,95,1.643,96,1.017,134,2.994,141,3.265,142,2.2,143,1.296,146,2.61,147,2.792,148,2.447,150,1.756,163,2.242,179,3.36,180,2.2,181,1.386,182,2.915,183,2.509,184,2.424,185,2.242,186,2.55,187,2.424,188,1.558,189,3.655,190,2.424,191,2.55,192,1.386,193,2.609,194,2.932,195,3.243,196,3.243,197,3,198,2.915,199,3.655,200,1.386,201,2.424,202,3.694,203,1.61,204,2.424,205,1.61,206,1.61,207,1.61,208,1.49,209,1.61,210,1.61,211,1.61,212,1.61,213,1.296,214,1.077,215,1.386,216,1.61,217,1.386,218,2.424,219,1.61,220,1.296,221,1.61,222,1.61,223,2.915,224,1.61,225,1.61,226,1.61,227,1.49,228,2.242,229,1.61,230,1.61]],["title/classes/ChangePasswordDto.html",[0,0.232,231,2.732]],["body/classes/ChangePasswordDto.html",[0,0.284,2,0.571,3,0.159,4,0.159,5,0.119,8,0.268,9,0.916,10,2.974,11,3.91,13,0.41,14,0.02,15,0.636,16,1.194,17,1.48,18,1.616,19,3.283,23,1.687,24,2.782,25,1.779,26,1.943,27,1.616,28,0.613,32,3.756,35,0.258,36,1.532,37,0.753,38,2.519,39,2.519,40,1.226,41,0.159,42,1.261,44,1.54,45,1.797,46,0.012,47,0.012,150,2.149,188,1.977,231,3.347,232,4.805,233,2.118,234,4.401,235,5.147,236,3.66,237,3.364,238,4.269,239,4.269,240,2.241,241,4.269,242,4.269,243,3.767,244,3.347,245,3.347,246,2.337,247,3.347,248,3.347,249,3.347,250,3.347,251,3.347,252,4.952,253,4.269,254,3.076,255,5.62,256,4.405,257,2.798,258,3.076,259,2.337,260,2.337,261,3.033,262,2.337]],["title/classes/ErrorFieldDto.html",[0,0.232,263,2.271]],["body/classes/ErrorFieldDto.html",[0,0.326,2,0.554,3,0.154,4,0.154,5,0.115,8,0.26,9,0.896,13,0.54,14,0.021,15,0.703,16,1,17,1.239,21,1.613,23,1.846,25,0.858,27,0.858,28,0.514,35,0.174,36,1.823,37,0.731,41,0.262,42,1.613,44,1.528,46,0.012,47,0.012,55,2.054,58,1.056,62,1.189,63,1.82,66,1.622,75,1.619,150,1.307,160,3.483,164,3.681,180,2.411,193,1.516,194,1.337,213,1.516,214,2.137,236,1.622,237,1.622,240,1.718,257,1.622,263,3.499,264,2.054,265,4.604,266,3.237,267,3.274,268,3.274,269,4.046,270,3.843,271,2.983,272,2.57,273,2.57,274,2.983,275,2.967,276,2.266,277,2.955,278,3.195,279,2.266,280,1.884,281,2.266,282,3.274,283,2.517,284,2.266,285,2.57,286,3.274,287,3.274,288,3.274,289,3.274,290,1.743,291,2.054,292,2.57,293,3.274,294,2.266,295,2.266,296,1.884,297,1.622,298,2.266,299,2.266,300,2.266,301,2.266,302,2.967,303,2.054,304,2.266,305,2.266]],["title/classes/ErrorMetaDto.html",[0,0.232,278,2.271]],["body/classes/ErrorMetaDto.html",[0,0.319,2,0.533,3,0.148,4,0.148,5,0.111,8,0.25,9,0.871,13,0.551,14,0.021,15,0.705,16,1.148,17,1.423,21,1.48,23,1.852,25,1.205,27,0.825,28,0.59,35,0.168,36,1.807,37,0.703,41,0.256,42,1.624,44,1.402,46,0.012,47,0.012,55,2.358,58,0.703,62,1.144,63,1.769,66,1.56,75,1.341,150,1.271,160,2.884,164,3.729,180,2.593,193,1.458,194,1.286,213,1.458,214,2.09,236,1.56,237,1.56,240,2.169,257,1.56,263,3.125,264,1.975,265,4.16,266,2.447,267,2.18,268,2.18,269,3.746,270,3.183,272,2.129,273,2.129,275,3.406,276,3.183,277,3.178,278,3.436,279,3.183,280,2.646,281,3.183,282,3.759,283,3.178,284,3.183,285,3.07,286,4.133,287,3.759,288,3.759,289,3.759,290,2.447,291,2.884,292,3.07,293,3.759,294,2.18,295,2.18,296,1.812,297,1.56,298,2.18,299,2.18,300,2.18,301,2.18,302,2.884,303,1.975,304,2.18,305,2.18,306,2.869,307,2.869,308,2.869]],["title/classes/ErrorResponseDto.html",[0,0.232,296,2.271]],["body/classes/ErrorResponseDto.html",[0,0.31,2,0.508,3,0.141,4,0.141,5,0.106,8,0.239,9,0.841,13,0.555,14,0.021,15,0.683,16,1.234,17,1.529,21,1.455,23,1.853,25,0.787,27,1.163,28,0.634,35,0.16,36,1.787,37,0.67,41,0.249,42,1.605,44,1.495,46,0.011,47,0.011,55,2.293,58,0.67,59,1.227,62,1.919,63,2.246,66,2.616,75,1.54,150,1.227,160,3.313,164,3.658,180,2.704,193,2.055,194,1.813,213,2.055,214,2.509,236,1.487,237,1.487,240,1.613,257,1.487,263,3.358,264,1.883,265,4.231,266,2.363,267,2.078,268,2.078,269,4.344,270,3.656,272,2.055,273,2.055,275,3.313,276,2.078,277,3.315,278,3.583,279,2.078,280,1.727,281,2.078,282,3.073,283,2.363,284,2.078,285,2.445,286,3.073,287,3.073,288,3.073,289,3.073,290,1.598,291,1.883,292,2.445,293,3.073,294,3.073,295,3.073,296,2.554,297,2.199,298,3.073,299,3.073,300,3.073,301,3.073,302,3.661,303,2.784,304,3.073,305,3.073,309,2.811,310,2.735,311,2.735,312,2.735,313,2.735]],["title/classes/ForgetPasswordDto.html",[0,0.232,314,2.732]],["body/classes/ForgetPasswordDto.html",[0,0.364,2,0.822,3,0.229,4,0.229,5,0.171,8,0.386,9,1.172,10,2.78,13,0.353,14,0.021,15,0.579,16,1.028,17,1.274,18,1.622,21,1.767,23,1.537,25,1.622,27,1.622,28,0.528,35,0.33,36,1.537,37,1.085,38,2.527,40,1.766,41,0.229,42,1.085,44,1.44,46,0.016,47,0.016,121,2.865,150,1.71,233,3.049,259,3.365,272,2.865,273,3.152,314,4.284,315,4.822,316,5.639,317,4.284,318,3.049,319,3.561,320,2.797,321,3.561]],["title/classes/GenericSuccessResponseDto.html",[0,0.232,217,1.955]],["body/classes/GenericSuccessResponseDto.html",[0,0.357,2,0.48,3,0.134,4,0.134,5,0.1,8,0.225,9,0.806,13,0.442,14,0.021,15,0.62,16,0.899,17,1.115,18,1.593,20,2.364,21,1.477,23,1.73,25,1.115,27,0.743,28,0.462,30,2.085,35,0.151,36,1.85,37,0.633,41,0.286,42,1.742,44,1.523,46,0.011,47,0.011,62,2.405,63,2.34,64,1.855,75,1.772,95,1.654,96,1.03,134,2.81,141,3.279,142,2.217,143,1.313,146,2.183,147,2.107,148,2.217,150,1.764,163,2.717,179,3.279,180,2.217,181,1.404,182,1.631,183,1.404,184,1.631,185,1.509,187,1.631,188,1.411,189,3.498,190,1.631,192,1.404,193,2.814,194,2.98,195,3.498,196,3.498,197,3.236,198,2.938,199,3.673,200,1.404,201,2.448,202,3.707,203,1.631,204,2.448,205,1.631,206,1.631,207,1.631,208,1.509,209,1.631,210,1.631,211,1.631,212,1.631,213,1.313,214,1.091,215,1.404,216,1.631,217,2.107,218,3.265,219,1.631,220,1.313,221,1.631,222,1.631,223,2.938,224,1.631,225,1.631,226,1.631,227,1.509,228,2.264,229,1.631,230,1.631,309,1.509,322,2.583,323,2.583]],["title/classes/GithubLoginDto.html",[0,0.232,324,2.732]],["body/classes/GithubLoginDto.html",[0,0.293,2,0.595,3,0.166,4,0.166,5,0.124,8,0.28,9,0.943,13,0.457,14,0.021,15,0.677,16,1.329,17,1.647,21,1.664,23,1.796,25,1.647,27,1.855,28,0.682,35,0.265,36,1.648,37,0.786,38,2.708,39,2.566,40,1.279,41,0.166,42,1.403,44,1.529,46,0.013,47,0.013,58,1.58,121,2.306,143,3.348,145,5.006,272,2.91,273,2.676,318,2.208,319,2.866,320,2.025,321,2.866,324,3.448,325,5.168,326,2.436,327,3.626,328,3.506,329,4.849,330,4.538,331,2.742,332,3.881,333,3.448,334,2.742,335,2.742,336,5.365,337,4.591,338,4.538,339,2.742,340,2.742,341,2.742,342,3.881,343,3.207,344,2.742,345,3.881,346,2.436,347,3.207]],["title/injectables/GithubStrategy.html",[129,2.271,348,1.091]],["body/injectables/GithubStrategy.html",[0,0.295,3,0.168,4,0.168,5,0.125,8,0.283,13,0.422,14,0.021,15,0.737,18,1.654,21,1.12,28,0.631,35,0.336,41,0.168,46,0.013,47,0.013,52,1.723,57,1.889,58,1.486,59,1.606,61,1.155,67,0.794,72,2.049,74,2.112,100,1.452,129,2.887,145,4.024,285,2.322,327,2.23,328,3.127,329,4.548,332,2.771,348,1.386,349,1.544,350,2.771,351,2.322,352,3.147,353,2.923,354,4.529,355,3.96,356,2.23,357,2.923,358,3.24,359,2.691,360,3.24,361,6.295,362,3.24,363,5.296,364,3.909,365,2.771,366,4.529,367,3.24,368,3.909,369,2.23,370,2.046,371,2.23,372,2.046,373,2.771,374,1.368,375,1.544,376,2.046,377,2.23,378,2.23,379,1.893,380,2.771,381,3.24,382,2.771,383,3.24,384,2.771,385,3.24,386,2.771,387,3.24,388,4.571,389,3.298,390,2.771,391,2.771,392,2.771,393,4.571,394,2.771,395,3.24,396,3.24,397,2.771,398,3.24,399,2.461,400,3.24,401,3.24,402,2.461,403,2.771,404,2.771,405,3.909,406,2.771,407,2.771,408,3.24]],["title/classes/GoogleLoginDto.html",[0,0.232,409,2.732]],["body/classes/GoogleLoginDto.html",[0,0.291,2,0.591,3,0.164,4,0.164,5,0.123,8,0.277,9,0.938,13,0.455,14,0.021,15,0.676,16,1.324,17,1.641,21,1.661,23,1.793,25,1.641,27,1.851,28,0.68,35,0.264,36,1.642,37,0.779,38,2.7,39,2.557,40,1.268,41,0.164,42,1.398,44,1.526,46,0.013,47,0.013,58,1.576,121,2.293,142,3.134,143,3.341,272,2.899,273,2.664,318,2.19,319,2.85,320,2.009,321,2.85,326,2.417,327,3.61,328,3.498,329,4.843,331,2.72,333,3.428,334,2.72,335,2.72,336,5.351,337,4.577,339,2.72,340,2.72,341,2.72,342,3.858,344,2.72,345,3.858,346,2.417,409,3.428,410,5.152,411,4.512,412,3.858,413,4.512,414,4.512,415,4.512,416,3.181,417,3.181]],["title/injectables/GoogleStrategy.html",[130,2.271,348,1.091]],["body/injectables/GoogleStrategy.html",[0,0.288,3,0.162,4,0.162,5,0.121,8,0.274,13,0.415,14,0.021,15,0.733,18,1.723,21,1.094,28,0.62,35,0.331,41,0.162,46,0.012,47,0.012,52,1.684,57,1.856,58,1.468,59,1.578,61,1.593,67,0.768,72,2.002,74,1.251,100,1.406,130,2.821,142,2.48,285,2.27,327,2.16,328,1.705,329,4.59,348,1.355,349,1.495,351,2.27,352,3.076,353,2.881,354,4.449,355,3.903,356,2.16,357,2.881,359,2.644,364,3.82,365,2.683,366,4.449,368,3.82,369,2.16,370,1.981,371,2.16,372,1.981,374,1.325,375,1.495,376,1.981,377,2.16,378,2.16,379,1.833,380,2.683,382,2.683,384,2.683,386,2.683,389,3.258,390,2.683,391,2.683,392,2.683,394,2.683,402,3.394,403,3.82,404,2.683,405,3.82,406,2.683,407,2.683,418,2.683,419,3.137,420,3.137,421,5.203,422,3.137,423,4.467,424,5.203,425,5.67,426,3.137,427,3.82,428,2.683,429,3.137,430,3.137,431,3.137,432,3.137,433,3.137,434,4.467,435,3.137,436,3.137,437,2.683,438,3.137,439,3.137,440,3.137,441,4.467,442,3.137,443,3.137,444,3.137]],["title/interfaces/IJwtPayload.html",[445,2.476,446,2.271]],["body/interfaces/IJwtPayload.html",[3,0.27,4,0.27,5,0.202,8,0.455,9,1.297,13,0.498,14,0.02,15,0.737,21,1.694,41,0.27,46,0.017,47,0.017,445,3.593,446,3.941,447,5.219,448,4.463,449,6.917]],["title/injectables/JwtAccessStrategy.html",[131,2.271,348,1.091]],["body/injectables/JwtAccessStrategy.html",[0,0.345,3,0.211,4,0.211,5,0.158,8,0.356,13,0.427,14,0.021,15,0.42,28,0.638,35,0.384,41,0.211,46,0.015,47,0.015,52,2.017,55,1.947,57,1.909,58,1.311,59,1.624,61,1.457,67,1.001,72,2.399,74,2.134,100,1.831,119,3.104,131,3.38,146,2.261,147,2.91,348,1.624,349,1.947,351,2.72,352,3.685,353,2.076,355,4.11,356,2.813,357,3.219,359,3.033,369,2.813,370,2.58,371,2.813,372,2.58,374,1.726,375,1.947,376,2.58,377,2.813,378,2.813,379,2.387,446,4.261,450,4.535,451,3.494,452,4.086,453,4.577,454,4.086,455,5.105,456,3.494,457,2.58,458,3.494,459,2.58,460,3.494,461,4.086,462,3.494,463,3.494,464,3.494]],["title/injectables/JwtRefreshStrategy.html",[132,2.271,348,1.091]],["body/injectables/JwtRefreshStrategy.html",[0,0.342,3,0.208,4,0.208,5,0.156,8,0.351,13,0.422,14,0.021,15,0.413,28,0.632,35,0.382,41,0.208,46,0.015,47,0.015,52,1.997,55,2.525,57,1.89,58,1.298,59,1.607,61,1.435,67,0.985,72,2.375,74,2.113,75,1.287,100,1.803,119,3.057,132,3.346,146,2.238,148,2.525,348,1.607,349,1.917,351,2.692,352,3.648,353,2.044,355,4.079,356,2.77,357,3.199,359,3.01,369,2.77,370,2.541,371,2.77,372,2.541,374,1.699,375,1.917,376,3.346,377,2.77,378,2.77,379,2.35,437,3.44,446,4.243,450,4.501,453,4.531,455,5.066,456,3.44,457,2.541,458,3.44,459,2.541,460,3.44,462,3.44,463,3.44,464,3.44,465,3.44,466,4.023,467,4.023,468,4.023,469,4.023]],["title/classes/LoginDto.html",[0,0.232,470,2.732]],["body/classes/LoginDto.html",[0,0.332,2,0.714,3,0.199,4,0.199,5,0.149,8,0.335,9,1.069,10,2.973,13,0.41,14,0.021,15,0.636,16,1.194,17,1.479,18,1.779,21,1.725,23,1.686,25,1.779,27,1.666,28,0.613,32,3.659,35,0.301,36,1.58,37,0.942,38,2.597,39,2.305,40,1.534,41,0.199,42,1.26,44,1.539,46,0.014,47,0.014,121,2.613,150,2.136,236,3.363,237,2.796,244,2.923,245,2.923,257,2.796,261,2.649,272,2.613,273,2.944,317,3.908,318,2.649,319,3.248,320,2.43,321,3.248,470,3.908,471,4.955,472,2.649,473,3.847,474,5.143,475,3.29]],["title/classes/LoginResponseDto.html",[0,0.232,192,1.955]],["body/classes/LoginResponseDto.html",[0,0.353,2,0.467,3,0.13,4,0.13,5,0.097,8,0.22,9,0.79,13,0.477,14,0.021,15,0.614,16,1.063,17,1.317,18,1.575,20,2.327,21,1.465,23,1.751,25,1.093,27,0.724,28,0.546,30,2.053,35,0.147,36,1.841,37,0.617,41,0.283,42,1.736,44,1.514,46,0.011,47,0.011,62,2.384,63,2.314,64,2.184,75,1.753,95,1.633,96,1.004,134,2.978,141,3.425,142,2.183,143,1.279,146,2.155,147,2.066,148,2.183,150,1.747,163,2.221,179,3.425,180,2.432,181,1.368,182,1.59,183,1.368,184,1.59,185,1.471,187,1.59,188,1.389,189,3.638,190,1.59,192,2.066,193,2.783,194,2.963,195,3.459,196,3.459,197,3.2,198,3.222,199,3.776,200,1.368,201,2.401,202,3.681,203,1.59,204,2.401,205,1.59,206,1.59,207,1.59,208,1.471,209,1.59,210,1.59,211,1.59,212,1.59,213,1.279,214,1.063,215,1.368,216,1.59,217,1.368,218,2.401,219,1.59,220,1.279,221,1.59,222,1.59,223,2.892,224,1.59,225,1.59,226,1.59,227,1.471,228,2.221,229,1.59,230,1.59,476,2.517,477,2.517,478,2.153]],["title/classes/LogoutDto.html",[0,0.232,479,2.732]],["body/classes/LogoutDto.html",[0,0.378,2,0.874,3,0.243,4,0.243,5,0.182,8,0.41,9,1.218,13,0.375,14,0.021,15,0.602,16,1.092,17,1.353,18,1.92,19,4.148,23,1.597,24,3.7,25,1.685,26,2.972,27,1.685,28,0.561,35,0.342,36,1.597,37,1.153,38,2.626,39,2.626,40,1.877,41,0.243,42,1.153,44,1.092,45,2.749,46,0.016,47,0.016,228,3.422,479,4.451,480,4.024,481,4.706]],["title/modules/MailModule.html",[79,1.215,126,2.271]],["body/modules/MailModule.html",[0,0.233,3,0.187,4,0.187,5,0.14,14,0.021,15,0.576,18,1.038,35,0.402,41,0.255,46,0.014,47,0.014,67,0.884,75,1.155,79,2.131,81,1.618,82,1.72,83,1.962,84,1.962,85,1.72,86,3.049,87,2.85,92,3.804,94,2.678,95,1.155,96,1.439,98,2.878,100,1.618,126,4.345,188,1.095,240,1.439,292,1.834,357,2.85,359,1.834,374,2.081,375,1.72,376,2.28,399,2.742,482,3.087,483,3.61,484,3.087,485,3.087,486,4.471,487,3.61,488,3.61,489,3.392,490,2.742,491,4.927,492,3.61,493,3.61,494,3.61,495,3.392,496,3.61,497,3.61,498,2.485,499,3.61,500,2.742,501,3.61,502,2.485,503,3.61,504,2.742,505,3.61,506,3.087,507,3.61,508,3.61,509,3.61,510,3.61,511,3.61,512,3.087,513,3.087,514,3.61,515,3.087,516,3.61,517,3.61,518,3.61,519,4.927,520,3.61,521,3.61,522,3.087,523,3.61,524,3.61,525,3.61]],["title/classes/MailProcessor.html",[0,0.232,495,2.476]],["body/classes/MailProcessor.html",[0,0.201,2,0.579,3,0.161,4,0.161,5,0.121,8,0.272,13,0.545,14,0.021,15,0.639,20,2.635,21,1.523,28,0.53,35,0.331,41,0.309,46,0.012,47,0.012,52,1.677,55,1.486,57,1.587,58,1.27,59,1.349,61,1.112,64,2.068,67,0.764,72,1.398,74,1.774,95,1.66,150,1.715,164,1.695,188,1.573,220,2.26,227,2.599,240,1.243,291,2.147,297,1.695,328,2.819,351,1.584,379,1.822,399,2.369,457,1.969,489,2.147,490,2.369,495,3.063,515,3.804,526,2.369,527,3.275,528,4.836,529,3.118,530,6.216,531,3.118,532,3.804,533,4.296,534,3.118,535,4.503,536,2.81,537,3.38,538,3.804,539,1.822,540,3.118,541,1.695,542,3.38,543,4.435,544,3.804,545,3.38,546,2.667,547,2.369,548,4.449,549,3.118,550,3.118,551,3.118,552,2.667,553,5.186,554,3.118,555,3.118,556,3.118,557,3.118,558,3.118,559,4.449,560,3.804,561,4.449,562,4.296,563,4.449,564,4.449,565,4.449,566,4.449,567,3.118,568,3.804,569,3.118,570,3.118,571,3.118,572,3.118,573,3.118,574,3.118,575,2.667,576,3.118,577,3.118]],["title/injectables/MailService.html",[348,1.091,486,2.271]],["body/injectables/MailService.html",[0,0.249,3,0.2,4,0.2,5,0.149,8,0.337,13,0.541,14,0.021,15,0.683,21,1.518,28,0.692,35,0.34,41,0.2,46,0.014,47,0.014,52,1.945,57,2.072,58,1.518,59,1.762,61,1.84,64,2.471,67,0.947,72,2.313,95,1.237,150,1.565,220,1.964,240,1.541,328,2.101,348,1.565,349,1.842,353,1.964,374,1.633,375,1.842,486,3.259,498,4.267,500,2.937,527,4.196,539,2.258,541,2.101,543,3.306,544,3.306,546,3.306,552,4.413,560,4.413,578,3.306,579,4.574,580,5.16,581,5.16,582,3.866,583,3.866,584,5.16,585,5.16,586,4.709,587,3.866,588,5.16,589,3.866,590,3.306,591,3.866,592,3.553,593,3.866,594,3.866]],["title/modules/PrismaModule.html",[79,1.215,91,2.271]],["body/modules/PrismaModule.html",[0,0.308,3,0.247,4,0.247,5,0.185,14,0.02,35,0.346,41,0.247,46,0.017,47,0.017,67,1.17,79,2.169,81,2.141,82,2.277,83,2.597,84,2.597,85,2.277,86,3.491,87,3.263,91,4.499,94,3.214,95,1.529,96,1.905,595,4.085,596,4.085,597,4.085,598,4.308,599,4.777,600,5.057,601,4.777]],["title/injectables/PrismaService.html",[348,1.091,598,2.101]],["body/injectables/PrismaService.html",[0,0.345,3,0.276,4,0.276,5,0.207,14,0.02,35,0.37,41,0.276,46,0.018,47,0.018,67,1.309,348,1.919,349,2.546,351,3.215,598,3.696,602,4.568,603,6.742,604,4.059]],["title/modules/QueueModule.html",[79,1.215,92,2.101]],["body/modules/QueueModule.html",[0,0.253,3,0.202,4,0.202,5,0.151,13,0.415,14,0.021,15,0.535,35,0.342,41,0.269,46,0.015,47,0.015,58,1.274,67,0.959,79,1.757,81,1.754,87,1.989,92,3.039,98,2.286,100,1.754,116,3.953,150,1.187,240,1.561,297,2.828,357,2.97,359,1.989,374,1.653,498,3.582,500,2.973,502,2.694,504,2.973,506,3.347,522,4.449,539,2.286,541,2.127,600,4.449,605,3.914,606,5.844,607,3.914,608,3.914,609,3.914,610,3.914,611,3.914,612,3.914,613,5.203,614,4.998,615,3.914,616,5.203,617,5.203,618,6.228,619,5.203,620,6.228,621,5.203,622,5.203,623,5.203,624,5.203,625,4.449,626,5.203,627,5.203,628,5.203,629,5.203,630,3.914]],["title/classes/RefreshTokenDto.html",[0,0.232,631,2.732]],["body/classes/RefreshTokenDto.html",[0,0.335,2,0.723,3,0.201,4,0.201,5,0.151,8,0.34,9,1.078,10,2.984,13,0.413,14,0.02,15,0.639,16,1.203,17,1.491,18,1.788,19,3.969,23,1.695,24,3.275,25,1.914,26,2.46,27,1.677,28,0.618,30,3.189,35,0.303,36,1.589,37,0.954,38,2.613,39,2.613,40,1.553,41,0.201,42,1.27,44,1.353,45,2.275,46,0.014,47,0.014,141,2.819,146,2.734,148,3.173,185,3.029,631,3.94,632,4.986,633,3.33,634,5.186,635,3.894,636,5.186,637,4.434,638,3.894,639,3.894,640,5.186,641,3.894,642,5.186]],["title/classes/RefreshTokenResponseDto.html",[0,0.232,215,1.955]],["body/classes/RefreshTokenResponseDto.html",[0,0.353,2,0.465,3,0.13,4,0.13,5,0.097,8,0.218,9,0.787,13,0.476,14,0.021,15,0.613,16,1.06,17,1.313,18,1.572,20,2.32,21,1.462,23,1.749,25,1.089,27,0.72,28,0.544,30,2.281,35,0.146,36,1.84,37,0.614,41,0.283,42,1.735,44,1.512,46,0.011,47,0.011,62,2.38,63,2.309,64,2.18,75,1.749,95,1.629,96,0.999,134,2.971,141,3.245,142,2.176,143,1.273,146,2.15,147,2.059,148,2.605,150,1.744,163,2.213,179,3.42,180,2.426,181,1.362,182,1.582,183,1.362,184,1.582,185,1.464,187,1.582,188,1.658,189,3.77,190,1.582,192,1.362,193,2.777,194,2.96,195,3.452,196,3.452,197,3.193,198,2.884,199,3.631,200,1.362,201,2.392,202,3.676,203,1.582,204,2.392,205,1.582,206,1.582,207,1.582,208,1.464,209,1.582,210,1.582,211,1.582,212,1.582,213,1.273,214,1.058,215,2.059,216,2.392,217,1.362,218,2.392,219,1.582,220,1.273,221,1.582,222,1.582,223,2.884,224,1.582,225,1.582,226,1.582,227,1.464,228,2.213,229,1.582,230,1.582,643,2.505,644,2.505,645,2.505]],["title/classes/RegisterResponseDto.html",[0,0.232,646,2.732]],["body/classes/RegisterResponseDto.html",[0,0.262,2,0.753,3,0.21,4,0.21,5,0.157,8,0.354,9,1.107,13,0.504,14,0.021,15,0.692,16,1.38,23,1.621,28,0.709,35,0.237,36,1.722,37,0.993,41,0.21,42,1.706,44,1.522,46,0.015,47,0.015,62,2.371,63,2.249,66,3.566,75,1.704,140,4.046,181,2.204,194,2.387,277,3.933,280,3.363,283,3.111,285,2.706,290,2.368,292,2.706,309,2.368,478,3.467,586,3.08,646,4.046,647,5.401,648,5.947,649,4.054,650,4.054,651,5.325,652,4.054,653,4.054,654,4.554,655,4.054,656,4.054,657,4.054]],["title/classes/RegisterUserDto.html",[0,0.232,658,2.476]],["body/classes/RegisterUserDto.html",[0,0.229,2,0.427,3,0.119,4,0.119,5,0.089,8,0.2,9,0.737,10,2.902,13,0.462,14,0.021,15,0.615,16,1.22,17,1.512,18,1.598,21,1.679,23,1.709,25,1.4,27,1.803,28,0.627,32,3.658,35,0.253,36,1.515,37,0.563,38,2.357,39,2.181,40,0.916,41,0.119,42,1.288,44,1.567,46,0.01,47,0.01,58,1.503,75,0.735,116,1.746,121,1.801,134,1.927,140,3.289,150,1.99,208,3.783,214,0.971,220,2.473,236,3.021,237,3.251,238,3.697,239,3.697,240,1.941,241,3.697,242,3.697,246,1.746,247,2.694,248,2.694,249,4.222,250,2.694,251,4.222,252,4.544,253,3.697,257,2.646,260,1.746,261,1.582,262,1.746,272,2.473,273,2.2,297,1.927,309,2.071,317,2.694,319,2.239,320,1.451,321,2.239,328,3.468,333,2.694,346,2.694,402,3.697,412,3.032,472,1.582,604,1.746,625,4.162,658,2.98,659,4.752,660,3.546,661,2.298,662,2.298,663,4.162,664,4.867,665,2.298,666,2.298,667,2.298,668,3.546,669,2.298,670,2.298,671,2.298,672,2.298,673,3.546,674,2.298,675,3.032,676,3.546,677,3.546,678,3.546,679,2.298,680,2.298,681,2.298,682,4.329,683,3.546,684,3.546,685,3.546,686,2.298,687,2.298,688,2.298,689,2.298,690,2.298,691,2.298,692,2.298,693,3.546]],["title/classes/ResetPasswordDto.html",[0,0.232,694,2.732]],["body/classes/ResetPasswordDto.html",[0,0.285,2,0.574,3,0.16,4,0.16,5,0.12,8,0.27,9,0.92,10,2.978,11,3.923,13,0.412,14,0.02,15,0.637,16,1.198,17,1.485,18,1.62,19,3.292,21,1.38,22,4.818,23,1.69,24,2.794,25,1.62,26,1.954,27,1.714,28,0.615,30,2.861,31,3.783,32,3.765,33,2.646,35,0.259,36,1.536,37,0.758,38,2.525,39,2.525,40,1.234,41,0.16,42,1.265,43,2.351,44,1.481,45,1.807,46,0.012,47,0.012,95,1.984,150,2.109,188,1.98,233,2.13,234,4.415,236,3.37,237,3.063,238,4.281,239,4.281,240,2.247,241,4.281,242,4.281,243,3.783,244,2.351,245,2.351,246,2.351,247,3.361,248,3.361,249,3.361,250,3.361,251,3.361,252,4.959,253,4.281,257,1.682,259,2.351,260,2.351,261,2.13,262,2.351,694,3.361,695,4.818,696,3.094,697,3.094]],["title/classes/ResponseException.html",[0,0.232,698,2.732]],["body/classes/ResponseException.html",[0,0.206,2,0.593,3,0.165,4,0.165,5,0.123,8,0.279,13,0.255,14,0.021,15,0.644,28,0.381,35,0.265,41,0.165,44,1.622,46,0.013,47,0.013,52,1.706,55,2.504,57,1.139,58,0.782,59,0.969,61,1.139,62,1.274,66,1.736,67,0.782,69,2.199,76,4.494,164,3.107,188,0.969,214,1.349,265,3.115,266,3.339,269,3.935,277,3.07,280,2.858,283,1.866,285,1.623,292,1.623,302,2.199,303,2.199,309,1.866,389,3.406,427,2.731,504,3.992,698,3.438,699,2.731,700,3.87,701,5.255,702,4.888,703,4.525,704,5.716,705,3.194,706,5.255,707,5.255,708,3.194,709,3.194,710,3.194,711,3.194,712,3.194,713,4.525,714,3.194,715,3.194,716,6.866,717,3.194,718,3.194,719,5.716,720,4.525,721,5.255,722,3.194,723,3.194,724,3.194,725,3.194,726,5.255,727,5.255,728,4.525,729,3.194,730,3.194,731,2.731]],["title/classes/ResponseInterceptor.html",[0,0.232,732,2.732]],["body/classes/ResponseInterceptor.html",[0,0.249,2,0.718,3,0.2,4,0.2,5,0.149,8,0.337,13,0.308,14,0.021,28,0.461,35,0.34,41,0.2,44,1.197,46,0.014,47,0.014,52,1.945,55,2.954,57,1.379,58,0.947,59,1.173,61,1.379,62,1.541,64,2.058,66,3.158,67,0.947,69,2.661,74,2.058,75,1.237,194,1.733,277,3.393,283,3.393,285,1.964,292,1.964,389,3.746,536,3.259,568,4.413,654,3.306,700,4.413,731,3.306,732,3.92,733,3.306,734,5.809,735,5.809,736,3.866,737,6.198,738,5.809,739,6.198,740,3.866,741,5.809,742,3.866,743,3.306,744,3.866,745,3.866,746,5.16,747,4.967,748,3.866,749,3.866,750,3.866,751,3.866,752,3.866,753,3.866,754,3.866,755,3.866]],["title/classes/SocialLoginResponseDto.html",[0,0.232,200,1.955]],["body/classes/SocialLoginResponseDto.html",[0,0.351,2,0.461,3,0.129,4,0.129,5,0.096,8,0.217,9,0.783,13,0.475,14,0.021,15,0.612,16,1.055,17,1.307,18,1.566,20,2.309,21,1.458,23,1.712,25,1.083,27,1.083,28,0.542,30,2.037,35,0.145,36,1.837,37,0.609,41,0.282,42,1.733,44,1.509,46,0.011,47,0.011,59,1.142,62,2.374,63,2.301,64,2.172,75,1.743,95,1.622,96,0.991,134,2.961,141,3.479,142,2.166,143,1.263,146,2.141,147,2.047,148,2.166,150,1.739,163,2.655,179,3.413,180,2.416,181,1.351,182,1.57,183,1.351,184,1.57,185,1.452,187,1.57,188,1.379,189,3.62,190,1.57,192,1.351,193,2.768,194,2.989,195,3.44,196,3.44,197,3.182,198,2.87,199,3.62,200,2.047,201,3.202,202,3.668,203,1.57,204,2.378,205,1.57,206,1.57,207,1.57,208,1.452,209,1.57,210,1.57,211,1.57,212,1.57,213,1.913,214,1.59,215,1.351,216,1.57,217,1.351,218,2.378,219,1.57,220,1.263,221,1.57,222,1.57,223,2.87,224,1.57,225,1.57,226,1.57,227,1.452,228,2.199,229,1.57,230,1.57,309,1.452,756,2.486,757,2.486,758,2.486]],["title/modules/TaskModule.html",[79,1.215,93,2.271]],["body/modules/TaskModule.html",[0,0.293,3,0.235,4,0.235,5,0.176,14,0.021,35,0.367,41,0.235,46,0.016,47,0.016,67,1.113,79,2.12,81,2.036,82,2.165,83,2.47,84,2.47,85,2.165,86,3.413,87,3.19,93,4.45,94,3.115,95,1.454,96,1.812,98,2.654,121,2.309,188,1.378,502,3.128,759,3.886,760,3.886,761,3.886,762,4.627,763,4.544,764,4.901,765,4.544,766,3.452,767,4.544,768,4.544,769,4.544]],["title/injectables/TaskService.html",[348,1.091,762,2.271]],["body/injectables/TaskService.html",[0,0.213,3,0.17,4,0.17,5,0.127,8,0.287,10,1.476,13,0.263,14,0.021,16,1.073,18,1.666,19,1.924,28,0.637,30,2.395,35,0.312,41,0.17,46,0.013,47,0.013,52,1.743,57,1.175,58,1.495,59,0.999,61,1.649,64,1.844,67,0.807,72,2.073,74,1.313,75,1.054,95,1.054,148,1.57,183,2.514,188,0.999,197,1.924,214,1.953,266,3.122,290,1.924,348,1.403,349,1.57,353,2.35,374,2.257,375,1.57,389,2.514,527,3.997,535,2.268,579,4.357,592,3.679,598,3.385,762,2.92,764,5.673,766,2.502,770,2.817,771,5.795,772,5.795,773,3.294,774,3.294,775,4.57,776,4.624,777,4.624,778,4.624,779,5.795,780,5.795,781,3.294,782,4.624,783,5.344,784,3.294,785,4.624,786,3.294,787,3.294,788,3.294,789,3.294,790,3.294,791,3.294,792,3.294,793,3.294,794,3.294,795,3.294,796,3.294,797,2.817,798,3.954,799,3.294,800,3.294,801,3.954,802,3.294,803,3.294,804,3.294,805,3.294,806,3.954,807,3.294,808,3.294,809,3.294,810,3.294,811,3.294,812,3.294]],["title/classes/UpdateUserDto.html",[0,0.232,813,2.732]],["body/classes/UpdateUserDto.html",[0,0.3,2,0.617,3,0.172,4,0.172,5,0.128,8,0.29,9,0.967,12,4.59,13,0.539,14,0.021,15,0.652,16,1.568,28,0.805,35,0.34,39,2.607,40,1.324,41,0.172,46,0.013,47,0.013,63,2.457,183,2.918,266,4.078,290,3.707,351,2.363,457,2.098,472,2.287,475,2.84,604,2.523,658,2.287,797,4.59,798,4.59,806,4.59,813,3.534,814,5.852,815,4.652,816,5.368,817,5.368,818,5.368,819,5.368,820,4.652,821,3.322,822,3.322,823,5.368,824,3.322,825,5.368,826,3.322,827,3.322,828,5.368,829,3.322,830,3.322,831,3.322,832,3.322,833,3.322,834,2.84,835,5.368,836,5.816,837,3.322,838,6.844,839,2.84,840,3.322,841,3.322]],["title/modules/UploadModule.html",[79,1.215,127,2.271]],["body/modules/UploadModule.html",[0,0.268,3,0.215,4,0.215,5,0.16,14,0.021,15,0.618,35,0.386,41,0.215,46,0.015,47,0.015,67,1.017,74,1.655,79,2.031,81,1.86,82,1.978,83,2.256,84,2.256,85,1.978,86,3.27,87,3.056,94,2.939,95,1.328,96,1.655,98,2.424,100,1.86,121,2.109,127,4.358,188,1.259,357,3.056,359,2.109,374,1.753,502,2.857,842,3.549,843,3.549,844,3.549,845,4.569,846,4.15,847,4.624,848,3.153,849,3.153,850,3.153,851,3.723,852,4.15,853,4.15,854,4.15,855,4.15,856,4.15,857,4.15,858,4.15,859,4.15,860,4.15,861,4.15,862,4.15]],["title/classes/UploadProcessor.html",[0,0.232,851,2.476]],["body/classes/UploadProcessor.html",[0,0.254,2,0.732,3,0.204,4,0.204,5,0.152,8,0.344,10,1.767,13,0.417,14,0.021,28,0.623,35,0.365,41,0.204,46,0.015,47,0.015,52,1.971,57,1.865,58,1.281,59,1.586,61,1.406,64,1.572,67,0.966,72,2.343,74,1.572,164,2.143,188,1.586,351,2.003,353,2.003,374,2.208,375,1.879,379,2.303,389,2.842,459,2.49,527,3.705,528,5.016,532,3.372,535,4.692,536,3.302,537,2.996,538,4.471,539,2.303,541,2.143,562,2.996,592,2.715,702,3.372,847,5.342,848,3.972,849,2.996,850,4.746,851,3.6,863,3.372,864,3.943,865,3.943,866,3.943,867,5.229,868,3.943,869,3.943,870,3.943,871,3.943,872,3.943,873,3.943,874,3.372,875,3.943,876,5.229,877,3.943,878,3.943,879,3.372,880,3.943,881,3.943,882,3.943,883,3.943]],["title/injectables/UploadService.html",[348,1.091,845,2.271]],["body/injectables/UploadService.html",[0,0.189,3,0.151,4,0.151,5,0.212,8,0.255,9,0.884,10,2.883,13,0.513,14,0.021,15,0.693,28,0.725,35,0.356,41,0.151,45,1.71,46,0.012,47,0.012,52,1.602,57,1.959,58,1.429,59,1.666,61,1.785,67,0.717,72,1.905,74,1.996,100,1.312,188,0.888,292,2.16,337,3.23,348,1.289,349,1.395,353,3.526,357,2.791,359,2.791,374,1.796,375,2.026,389,2.986,459,3.469,498,4.016,527,3.843,536,3.469,539,1.71,541,2.311,562,2.224,579,3.446,590,2.504,592,2.927,614,2.504,675,2.504,747,2.504,845,2.685,874,2.504,884,2.504,885,5.493,886,5.005,887,4.251,888,4.251,889,4.251,890,2.928,891,4.251,892,4.251,893,4.251,894,6.085,895,2.928,896,4.251,897,2.928,898,4.251,899,4.251,900,2.928,901,2.928,902,2.928,903,2.016,904,2.928,905,2.928,906,4.251,907,2.928,908,2.928,909,2.928,910,4.251,911,2.928,912,2.928,913,2.928,914,2.928,915,2.928,916,2.928,917,2.928,918,2.928,919,4.251,920,2.928,921,2.928,922,4.251,923,2.928,924,2.928,925,2.928,926,2.224,927,2.928,928,2.928,929,2.928,930,2.928,931,2.928,932,2.928,933,2.928,934,2.928,935,2.928]],["title/classes/Util.html",[0,0.232,903,2.476]],["body/classes/Util.html",[0,0.256,2,0.736,3,0.205,4,0.205,5,0.153,8,0.346,13,0.469,14,0.021,15,0.733,28,0.701,35,0.307,41,0.205,43,3.985,46,0.015,47,0.015,52,1.977,57,2.097,58,1.44,59,1.784,61,2.097,74,2.345,202,2.315,240,2.345,297,2.154,536,3.953,575,4.486,579,4.049,903,3.612,926,5.083,936,3.389,937,7.012,938,5.246,939,5.246,940,5.246,941,3.963,942,3.963,943,5.246,944,3.963,945,5.881,946,5.246,947,5.881,948,3.963,949,3.963,950,3.389,951,3.963,952,3.963,953,3.963,954,3.963,955,3.963]],["title/coverage.html",[956,4.203]],["body/coverage.html",[0,0.466,1,2.078,5,0.106,6,2.339,7,2.339,13,0.452,14,0.021,46,0.011,47,0.011,48,3.073,49,1.883,51,2.339,70,2.078,85,1.304,128,2.078,129,1.727,130,1.727,131,1.727,132,1.727,166,2.339,179,1.487,180,3.007,181,3.229,188,0.83,192,1.487,200,1.487,215,1.487,217,1.487,231,2.078,232,2.339,233,3.313,263,1.727,264,3.313,278,1.727,296,1.727,314,2.078,315,2.339,324,2.078,325,2.339,326,3.073,348,1.954,350,2.339,409,2.078,410,2.339,418,2.339,445,1.883,446,1.727,448,2.339,450,3.073,451,2.339,465,2.339,470,2.078,471,2.339,472,3.313,479,2.078,480,2.339,486,1.727,495,1.883,526,4.311,533,2.078,542,2.078,545,2.078,547,2.078,578,2.339,598,1.598,602,2.339,631,2.078,632,2.339,633,2.339,646,2.078,647,2.339,658,1.883,659,2.339,694,2.078,695,2.339,698,2.078,699,2.339,732,2.078,733,2.339,762,1.727,770,2.339,813,2.078,814,2.339,845,1.727,851,1.883,863,2.339,884,2.339,903,1.883,936,2.339,956,2.339,957,2.735,958,2.735,959,2.735,960,7.44,961,5.674,962,2.735,963,2.735,964,2.735,965,2.735,966,6.648,967,2.339,968,2.735,969,2.735,970,2.735,971,6.648,972,2.735,973,4.044,974,2.735,975,5.317,976,6.443,977,2.339,978,5.317,979,2.735,980,4.115,981,4.115,982,2.339,983,2.339,984,2.735,985,2.735]],["title/dependencies.html",[82,2.062,986,2.566]],["body/dependencies.html",[0,0.352,14,0.021,37,1.033,40,1.681,46,0.015,47,0.015,67,1.033,69,2.903,82,2.009,100,1.89,102,3.606,105,3.606,142,2.009,146,1.781,168,3.606,275,2.903,370,2.663,372,4.049,373,3.606,428,3.606,457,2.663,489,2.903,490,3.203,539,2.463,541,2.292,743,3.606,766,3.203,834,3.606,848,4.151,849,3.203,850,3.203,950,3.606,987,4.216,988,4.216,989,4.216,990,6.061,991,4.216,992,4.216,993,4.216,994,4.216,995,4.216,996,4.216,997,4.216,998,4.216,999,4.216,1000,4.216,1001,4.216,1002,4.216,1003,4.216,1004,4.216,1005,4.216,1006,4.216,1007,4.216,1008,4.216,1009,4.216,1010,4.216,1011,4.216,1012,4.216,1013,4.216,1014,4.216,1015,4.216,1016,4.216,1017,4.216,1018,4.216,1019,4.216,1020,4.216,1021,4.216,1022,4.216,1023,4.216,1024,4.216]],["title/miscellaneous/functions.html",[1025,2.066,1026,3.7]],["body/miscellaneous/functions.html",[8,0.434,13,0.483,14,0.02,15,0.623,46,0.017,47,0.017,57,2.162,58,1.485,59,1.838,61,2.162,70,4.967,85,3.115,240,2.713,977,4.252,980,4.252,981,5.819,982,5.183,983,5.183,1025,3.423,1026,4.252,1027,4.973,1028,6.537,1029,4.973,1030,4.973,1031,4.973,1032,4.973]],["title/index.html",[8,0.262,1033,3,1034,3]],["body/index.html",[5,0.165,14,0.021,18,1.226,46,0.015,47,0.015,59,1.293,64,1.699,146,1.8,154,3.645,188,1.293,459,2.692,489,2.934,512,4.705,513,3.645,537,3.238,541,3.312,637,3.645,775,3.645,801,3.645,839,3.645,879,3.645,926,4.18,1035,4.262,1036,3.238,1037,4.262,1038,5.502,1039,6.092,1040,4.262,1041,6.665,1042,4.262,1043,4.262,1044,4.262,1045,4.262,1046,4.262,1047,4.262,1048,4.262,1049,4.262,1050,5.502,1051,4.262,1052,4.262,1053,4.262,1054,4.262,1055,4.262,1056,4.262,1057,4.262,1058,4.262,1059,4.262,1060,4.262,1061,4.262,1062,4.262,1063,4.262,1064,4.262,1065,4.262,1066,4.262,1067,4.262,1068,4.262,1069,4.262,1070,4.262,1071,4.262,1072,4.262,1073,4.262,1074,4.262,1075,4.262,1076,4.262,1077,4.262,1078,4.262,1079,4.262,1080,4.262,1081,4.262,1082,4.262,1083,4.262,1084,4.262,1085,4.262,1086,4.262]],["title/modules.html",[81,2.203]],["body/modules.html",[14,0.017,46,0.017,47,0.017,80,3.558,81,2.316,90,3.264,91,3.264,92,3.019,93,3.264,126,3.264,127,3.264,397,4.419,1087,7.16,1088,7.16,1089,7.16,1090,7.24,1091,5.168]],["title/overview.html",[1036,3.734]],["body/overview.html",[2,0.683,14,0.021,46,0.014,47,0.014,50,2.531,79,1.242,80,4.807,81,1.648,82,1.752,83,1.999,84,1.999,85,1.752,86,1.999,87,1.868,88,3.144,89,3.144,90,4.599,91,4.135,92,3.548,93,4.135,94,2.712,95,1.177,96,1.466,123,3.144,124,3.144,125,3.144,126,4.303,127,4.135,128,4.302,129,3.576,130,3.576,131,3.576,132,3.576,349,1.752,445,2.531,482,3.144,484,3.144,485,3.144,486,4.229,595,3.144,596,3.144,597,3.144,598,3.912,663,3.144,759,3.144,760,3.144,761,3.144,762,4.229,842,3.144,843,3.144,844,3.144,845,4.229,967,3.144,1036,2.793,1092,3.677,1093,3.677,1094,3.677]],["title/properties.html",[9,0.9,986,2.566]],["body/properties.html",[9,1.166,14,0.02,42,1.374,46,0.018,47,0.018,1095,5.608,1096,5.608,1097,5.608,1098,5.608,1099,5.608]],["title/miscellaneous/typealiases.html",[1025,2.066,1100,4.327]],["body/miscellaneous/typealiases.html",[8,0.463,13,0.536,14,0.019,46,0.018,47,0.018,526,4.031,533,4.788,535,4.339,542,5.107,545,5.107,547,4.788,586,4.788,1025,3.653,1101,5.307,1102,6.955]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["0.0.0.0",{"_index":652,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["0.0.1",{"_index":1096,"title":{},"body":{"properties.html":{}}}],["0.1.12",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["0.43.1",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":288,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["1",{"_index":1094,"title":{},"body":{"overview.html":{}}}],["1.8.1",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":553,"title":{},"body":{"classes/MailProcessor.html":{}}}],["100",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{}}}],["1000",{"_index":621,"title":{},"body":{"modules/QueueModule.html":{}}}],["100})@isstring()@isnotempty({message",{"_index":665,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["11.0.0",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":793,"title":{},"body":{"injectables/TaskService.html":{}}}],["12ms",{"_index":655,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["15t10:30:45.123z",{"_index":289,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["1754273896331",{"_index":656,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["2",{"_index":663,"title":{},"body":{"classes/RegisterUserDto.html":{},"overview.html":{}}}],["2.0.0",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["2.1692.0",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["201",{"_index":653,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["2024",{"_index":287,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["25",{"_index":967,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["3",{"_index":625,"title":{},"body":{"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{}}}],["3.858.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":677,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["3000",{"_index":628,"title":{},"body":{"modules/QueueModule.html":{}}}],["32",{"_index":43,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Util.html":{}}}],["32})@isstring()@isnotempty({message",{"_index":33,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ResetPasswordDto.html":{}}}],["3600",{"_index":619,"title":{},"body":{"modules/QueueModule.html":{}}}],["4",{"_index":405,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["4.0.1",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":282,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["5.56.9",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["6.0.0",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["6.13.0",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":1092,"title":{},"body":{"overview.html":{}}}],["7.0.5",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":236,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["8.1.0",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":623,"title":{},"body":{"modules/QueueModule.html":{}}}],["9",{"_index":1093,"title":{},"body":{"overview.html":{}}}],["9]/g",{"_index":403,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["9_",{"_index":682,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["9_]+$'})@isstring()@isnotempty({message",{"_index":679,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["_accesstoken",{"_index":368,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["_refreshtoken",{"_index":366,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456",{"_index":31,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ResetPasswordDto.html":{}}}],["access",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"injectables/JwtAccessStrategy.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["access.strategy",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["access.strategy.ts",{"_index":451,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"coverage.html":{}}}],["access.strategy.ts:23",{"_index":454,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["access.strategy.ts:8",{"_index":452,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["accesskeyid",{"_index":858,"title":{},"body":{"modules/UploadModule.html":{}}}],["accesstoken",{"_index":182,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["account",{"_index":220,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["account_verified",{"_index":219,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["accountverifydto",{"_index":1,"title":{"classes/AccountVerifyDto.html":{}},"body":{"classes/AccountVerifyDto.html":{},"coverage.html":{}}}],["active",{"_index":211,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["adapter",{"_index":521,"title":{},"body":{"modules/MailModule.html":{}}}],["added",{"_index":791,"title":{},"body":{"injectables/TaskService.html":{}}}],["address",{"_index":273,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["address'})@isnotempty({message",{"_index":320,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["age",{"_index":618,"title":{},"body":{"modules/QueueModule.html":{}}}],["alias",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":204,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["already_logged_in",{"_index":209,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["any).error",{"_index":728,"title":{},"body":{"classes/ResponseException.html":{}}}],["api",{"_index":184,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["api/auth/login",{"_index":293,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["api_docs",{"_index":65,"title":{},"body":{"controllers/AppController.html":{}}}],["apiexcludecontroller",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["apiproperty",{"_index":36,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["apiproperty({description",{"_index":17,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["apiproperty({example",{"_index":648,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["app.controller",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":49,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":80,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":949,"title":{},"body":{"classes/Util.html":{}}}],["argon.hash(text",{"_index":953,"title":{},"body":{"classes/Util.html":{}}}],["argon.verify(hashed",{"_index":954,"title":{},"body":{"classes/Util.html":{}}}],["argon2",{"_index":950,"title":{},"body":{"classes/Util.html":{},"dependencies.html":{}}}],["argumentshost",{"_index":704,"title":{},"body":{"classes/ResponseException.html":{}}}],["array",{"_index":304,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["array.isarray(msg",{"_index":723,"title":{},"body":{"classes/ResponseException.html":{}}}],["asia/dhaka",{"_index":780,"title":{},"body":{"injectables/TaskService.html":{}}}],["associated",{"_index":634,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["async",{"_index":527,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["attempts",{"_index":624,"title":{},"body":{"modules/QueueModule.html":{}}}],["auth",{"_index":508,"title":{},"body":{"modules/MailModule.html":{}}}],["auth.controller",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/register",{"_index":657,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["authcontroller",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["authmodule",{"_index":90,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1099,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["authtokensdto",{"_index":179,"title":{"classes/AuthTokensDto.html":{}},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["available",{"_index":397,"title":{},"body":{"injectables/GithubStrategy.html":{},"modules.html":{}}}],["await",{"_index":592,"title":{},"body":{"injectables/MailService.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["aws",{"_index":848,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"dependencies.html":{}}}],["aws_cloudfront_url",{"_index":909,"title":{},"body":{"injectables/UploadService.html":{}}}],["aws_s3",{"_index":854,"title":{},"body":{"modules/UploadModule.html":{}}}],["aws_secret_access_key",{"_index":862,"title":{},"body":{"modules/UploadModule.html":{}}}],["backend",{"_index":1060,"title":{},"body":{"index.html":{}}}],["backoff",{"_index":626,"title":{},"body":{"modules/QueueModule.html":{}}}],["badrequestexception",{"_index":902,"title":{},"body":{"injectables/UploadService.html":{}}}],["badrequestexception('mime",{"_index":920,"title":{},"body":{"injectables/UploadService.html":{}}}],["base64",{"_index":879,"title":{},"body":{"classes/UploadProcessor.html":{},"index.html":{}}}],["baseusername",{"_index":400,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["baseusername}_${timestamp",{"_index":408,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["before",{"_index":1075,"title":{},"body":{"index.html":{}}}],["binary",{"_index":1066,"title":{},"body":{"index.html":{}}}],["blogs",{"_index":1040,"title":{},"body":{"index.html":{}}}],["body",{"_index":877,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["boolean",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"classes/UpdateUserDto.html":{}}}],["bootstrap",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1090,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1087,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":874,"title":{},"body":{"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["bucketname",{"_index":885,"title":{},"body":{"injectables/UploadService.html":{}}}],["buffer",{"_index":926,"title":{},"body":{"injectables/UploadService.html":{},"classes/Util.html":{},"index.html":{}}}],["buffer.from(data.buffer",{"_index":878,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["bullmodule",{"_index":606,"title":{},"body":{"modules/QueueModule.html":{}}}],["bullmodule.forrootasync",{"_index":608,"title":{},"body":{"modules/QueueModule.html":{}}}],["bullmodule.registerqueue",{"_index":615,"title":{},"body":{"modules/QueueModule.html":{}}}],["bullmq",{"_index":541,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"dependencies.html":{},"index.html":{}}}],["byte",{"_index":942,"title":{},"body":{"classes/Util.html":{}}}],["bytes",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["c",{"_index":415,"title":{},"body":{"classes/GoogleLoginDto.html":{}}}],["callback",{"_index":437,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["callbackurl",{"_index":384,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":739,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["case",{"_index":559,"title":{},"body":{"classes/MailProcessor.html":{}}}],["catch",{"_index":702,"title":{},"body":{"classes/ResponseException.html":{},"classes/UploadProcessor.html":{}}}],["catch(exception",{"_index":703,"title":{},"body":{"classes/ResponseException.html":{}}}],["caused",{"_index":267,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["challenges",{"_index":1062,"title":{},"body":{"index.html":{}}}],["change",{"_index":226,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["changed",{"_index":225,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["changepassworddto",{"_index":231,"title":{"classes/ChangePasswordDto.html":{}},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["character",{"_index":242,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["characters",{"_index":237,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["check",{"_index":913,"title":{},"body":{"injectables/UploadService.html":{}}}],["class",{"_index":0,"title":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"classes/Util.html":{}},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"classes/Util.html":{},"overview.html":{}}}],["clientid",{"_index":380,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":382,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clm1234567890abcdef",{"_index":24,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["cloudfront",{"_index":906,"title":{},"body":{"injectables/UploadService.html":{}}}],["cloudfronturl",{"_index":886,"title":{},"body":{"injectables/UploadService.html":{}}}],["cluster_appmodule",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":482,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":484,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_imports",{"_index":483,"title":{},"body":{"modules/MailModule.html":{}}}],["cluster_mailmodule_providers",{"_index":485,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":595,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":596,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":597,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":759,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_exports",{"_index":761,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":760,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":842,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":843,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_providers",{"_index":844,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["code",{"_index":281,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["codes",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["command",{"_index":873,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["comprehensive",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["compression",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["conclusion",{"_index":1083,"title":{},"body":{"index.html":{}}}],["concurrency",{"_index":555,"title":{},"body":{"classes/MailProcessor.html":{}}}],["concurrency(can",{"_index":551,"title":{},"body":{"classes/MailProcessor.html":{}}}],["config",{"_index":359,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{}}}],["config.get",{"_index":861,"title":{},"body":{"modules/UploadModule.html":{}}}],["config.get('access_token_secret",{"_index":461,"title":{},"body":{"injectables/JwtAccessStrategy.html":{}}}],["config.get('aws_access_key_id",{"_index":859,"title":{},"body":{"modules/UploadModule.html":{}}}],["config.get('aws_region",{"_index":856,"title":{},"body":{"modules/UploadModule.html":{}}}],["config.get('email_host",{"_index":505,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('email_pass",{"_index":510,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('email_port",{"_index":507,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('email_user",{"_index":509,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('github_callback_url",{"_index":385,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["config.get('github_client_id",{"_index":381,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["config.get('github_client_secret",{"_index":383,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["config.get('google_callback_url",{"_index":431,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('google_client_id",{"_index":429,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('google_client_secret",{"_index":430,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["config.get('redis_host",{"_index":610,"title":{},"body":{"modules/QueueModule.html":{}}}],["config.get('redis_password",{"_index":611,"title":{},"body":{"modules/QueueModule.html":{}}}],["config.get('redis_port",{"_index":612,"title":{},"body":{"modules/QueueModule.html":{}}}],["config.get('refresh_token_secret",{"_index":468,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["configmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":357,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{}}}],["configure",{"_index":607,"title":{},"body":{"modules/QueueModule.html":{}}}],["configured",{"_index":630,"title":{},"body":{"modules/QueueModule.html":{}}}],["connection",{"_index":609,"title":{},"body":{"modules/QueueModule.html":{}}}],["console.log",{"_index":513,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["const",{"_index":389,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["constructor(config",{"_index":356,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["constructor(mailerservice",{"_index":529,"title":{},"body":{"classes/MailProcessor.html":{}}}],["constructor(mailqueue",{"_index":582,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(prisma",{"_index":773,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(private",{"_index":556,"title":{},"body":{"classes/MailProcessor.html":{}}}],["constructor(s3",{"_index":864,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["constructor(uploadqueue",{"_index":890,"title":{},"body":{"injectables/UploadService.html":{}}}],["contain",{"_index":251,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["contenttype",{"_index":880,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["context",{"_index":568,"title":{},"body":{"classes/MailProcessor.html":{},"classes/ResponseInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":744,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":745,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["controller",{"_index":48,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["converted",{"_index":1074,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":549,"title":{},"body":{"classes/MailProcessor.html":{}}}],["corrupted",{"_index":1067,"title":{},"body":{"index.html":{}}}],["count",{"_index":620,"title":{},"body":{"modules/QueueModule.html":{}}}],["coverage",{"_index":956,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":839,"title":{},"body":{"classes/UpdateUserDto.html":{},"index.html":{}}}],["credentials",{"_index":857,"title":{},"body":{"modules/UploadModule.html":{}}}],["cron",{"_index":785,"title":{},"body":{"injectables/TaskService.html":{}}}],["cron(cronexpression.every_10_seconds",{"_index":782,"title":{},"body":{"injectables/TaskService.html":{}}}],["cron(cronexpression.every_week",{"_index":776,"title":{},"body":{"injectables/TaskService.html":{}}}],["cronexpression",{"_index":786,"title":{},"body":{"injectables/TaskService.html":{}}}],["crypto",{"_index":952,"title":{},"body":{"classes/Util.html":{}}}],["ctx",{"_index":709,"title":{},"body":{"classes/ResponseException.html":{}}}],["ctx.getrequest",{"_index":712,"title":{},"body":{"classes/ResponseException.html":{}}}],["ctx.getresponse",{"_index":711,"title":{},"body":{"classes/ResponseException.html":{}}}],["current",{"_index":255,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["custom",{"_index":788,"title":{},"body":{"injectables/TaskService.html":{}}}],["data",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"index.html":{}}}],["data.bucketname",{"_index":875,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["data.key",{"_index":876,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["data.mimetype",{"_index":881,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["database",{"_index":803,"title":{},"body":{"injectables/TaskService.html":{}}}],["date",{"_index":290,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/RegisterResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["date().toisostring",{"_index":730,"title":{},"body":{"classes/ResponseException.html":{}}}],["date.now",{"_index":747,"title":{},"body":{"classes/ResponseInterceptor.html":{},"injectables/UploadService.html":{}}}],["date.now().tostring().slice",{"_index":404,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["declarations",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["decoded",{"_index":1077,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["default",{"_index":297,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/MailProcessor.html":{},"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{},"classes/Util.html":{}}}],["defaultjoboptions",{"_index":616,"title":{},"body":{"modules/QueueModule.html":{}}}],["defaults",{"_index":511,"title":{},"body":{"modules/MailModule.html":{}}}],["define",{"_index":548,"title":{},"body":{"classes/MailProcessor.html":{}}}],["defined",{"_index":28,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["delay",{"_index":627,"title":{},"body":{"modules/QueueModule.html":{}}}],["delete",{"_index":783,"title":{},"body":{"injectables/TaskService.html":{}}}],["deleted",{"_index":802,"title":{},"body":{"injectables/TaskService.html":{}}}],["dependencies",{"_index":82,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describing",{"_index":299,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["description",{"_index":42,"title":{},"body":{"classes/AccountVerifyDto.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"properties.html":{}}}],["detailed",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["develop",{"_index":1051,"title":{},"body":{"index.html":{}}}],["developer",{"_index":1038,"title":{},"body":{"index.html":{}}}],["diagrams",{"_index":1080,"title":{},"body":{"index.html":{}}}],["different",{"_index":207,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["digits",{"_index":407,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dir",{"_index":516,"title":{},"body":{"modules/MailModule.html":{}}}],["discovered",{"_index":1070,"title":{},"body":{"index.html":{}}}],["display",{"_index":332,"title":{},"body":{"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{}}}],["displayname",{"_index":361,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["displayname?.tolowercase().replace(/[^a",{"_index":401,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["documentation",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["doe",{"_index":346,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["doe'})@isstring()@isnotempty({message",{"_index":334,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["doesn’t",{"_index":1071,"title":{},"body":{"index.html":{}}}],["done",{"_index":424,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":438,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["duration",{"_index":751,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["duration}ms",{"_index":755,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["during",{"_index":637,"title":{},"body":{"classes/RefreshTokenDto.html":{},"index.html":{}}}],["each",{"_index":1053,"title":{},"body":{"index.html":{}}}],["email",{"_index":21,"title":{},"body":{"classes/AccountVerifyDto.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["email'})@isemail",{"_index":318,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{}}}],["email/password",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["email_from",{"_index":514,"title":{},"body":{"modules/MailModule.html":{}}}],["emails",{"_index":390,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails?.[0]?.value",{"_index":392,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emailverified",{"_index":797,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["endpoints",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["enqueueupload",{"_index":887,"title":{},"body":{"injectables/UploadService.html":{}}}],["enqueueupload(file",{"_index":893,"title":{},"body":{"injectables/UploadService.html":{}}}],["enum",{"_index":673,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["env",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["envfilepath",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/MailProcessor.html":{},"classes/ResponseException.html":{},"classes/UploadProcessor.html":{}}}],["error('invalid",{"_index":563,"title":{},"body":{"classes/MailProcessor.html":{}}}],["error).message",{"_index":722,"title":{},"body":{"classes/ResponseException.html":{}}}],["error.dto.ts",{"_index":264,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"coverage.html":{}}}],["error.dto.ts:11",{"_index":271,"title":{},"body":{"classes/ErrorFieldDto.html":{}}}],["error.dto.ts:17",{"_index":274,"title":{},"body":{"classes/ErrorFieldDto.html":{}}}],["error.dto.ts:29",{"_index":307,"title":{},"body":{"classes/ErrorMetaDto.html":{}}}],["error.dto.ts:37",{"_index":308,"title":{},"body":{"classes/ErrorMetaDto.html":{}}}],["error.dto.ts:44",{"_index":306,"title":{},"body":{"classes/ErrorMetaDto.html":{}}}],["error.dto.ts:57",{"_index":313,"title":{},"body":{"classes/ErrorResponseDto.html":{}}}],["error.dto.ts:64",{"_index":311,"title":{},"body":{"classes/ErrorResponseDto.html":{}}}],["error.dto.ts:83",{"_index":310,"title":{},"body":{"classes/ErrorResponseDto.html":{}}}],["error.dto.ts:94",{"_index":312,"title":{},"body":{"classes/ErrorResponseDto.html":{}}}],["errorfielddto",{"_index":263,"title":{"classes/ErrorFieldDto.html":{}},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"coverage.html":{}}}],["errormetadto",{"_index":278,"title":{"classes/ErrorMetaDto.html":{}},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"coverage.html":{}}}],["errorresponse",{"_index":716,"title":{},"body":{"classes/ResponseException.html":{}}}],["errorresponsedto",{"_index":296,"title":{"classes/ErrorResponseDto.html":{}},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"coverage.html":{}}}],["errors",{"_index":269,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ResponseException.html":{}}}],["example",{"_index":23,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["examples",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["exception",{"_index":706,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception.getresponse",{"_index":717,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception.getstatus",{"_index":714,"title":{},"body":{"classes/ResponseException.html":{}}}],["exception.message",{"_index":726,"title":{},"body":{"classes/ResponseException.html":{}}}],["exceptionfilter",{"_index":701,"title":{},"body":{"classes/ResponseException.html":{}}}],["executioncontext",{"_index":737,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["existing_user",{"_index":203,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["exists",{"_index":206,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["expired",{"_index":777,"title":{},"body":{"injectables/TaskService.html":{}}}],["expiredusers",{"_index":804,"title":{},"body":{"injectables/TaskService.html":{}}}],["expiredusers.map(async",{"_index":809,"title":{},"body":{"injectables/TaskService.html":{}}}],["exponential",{"_index":629,"title":{},"body":{"modules/QueueModule.html":{}}}],["export",{"_index":41,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["exports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["express",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":894,"title":{},"body":{"injectables/UploadService.html":{}}}],["ext",{"_index":931,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":351,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{}}}],["extract",{"_index":462,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extractjwt",{"_index":456,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":464,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.rtch8q2iys_2kqvryhrgkq2kydg2oulmfhqr1uhwzuw",{"_index":190,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq.sflkxwrjsmekkf2qt4fwpmejf36pok6yjv_adqssw5c",{"_index":185,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["faced",{"_index":1063,"title":{},"body":{"index.html":{}}}],["failed",{"_index":303,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ResponseException.html":{}}}],["false",{"_index":214,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResponseException.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{}}}],["false})@validateif(o",{"_index":669,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["familyname",{"_index":421,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["familyname?.tolowercase().replace(/[^a",{"_index":442,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["features",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["field",{"_index":265,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ResponseException.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer.tostring('base64",{"_index":927,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.mimetype",{"_index":919,"title":{},"body":{"injectables/UploadService.html":{}}}],["filename",{"_index":898,"title":{},"body":{"injectables/UploadService.html":{}}}],["filenames",{"_index":929,"title":{},"body":{"injectables/UploadService.html":{}}}],["firstname",{"_index":439,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["firstname}_${lastname}_${timestamp",{"_index":443,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["firstname}_${timestamp",{"_index":444,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["forgetpassworddto",{"_index":314,"title":{"classes/ForgetPasswordDto.html":{}},"body":{"classes/ForgetPasswordDto.html":{},"coverage.html":{}}}],["forgot",{"_index":316,"title":{},"body":{"classes/ForgetPasswordDto.html":{}}}],["format",{"_index":25,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["formatbytes",{"_index":982,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatbytes(bytes",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formatted",{"_index":432,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["formatuptime",{"_index":983,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatuptime(seconds",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["forum/platform",{"_index":1049,"title":{},"body":{"index.html":{}}}],["forward",{"_index":436,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["found",{"_index":577,"title":{},"body":{"classes/MailProcessor.html":{}}}],["frontend",{"_index":1058,"title":{},"body":{"index.html":{}}}],["full",{"_index":412,"title":{},"body":{"classes/GoogleLoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["fully",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["function",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["functions",{"_index":1026,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":1081,"title":{},"body":{"index.html":{}}}],["general",{"_index":268,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["generate",{"_index":922,"title":{},"body":{"injectables/UploadService.html":{}}}],["generated",{"_index":342,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["generated/prisma",{"_index":604,"title":{},"body":{"injectables/PrismaService.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["generatefilename",{"_index":888,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(filename",{"_index":896,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatesafeusername",{"_index":354,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["generatesafeusername(githubusername",{"_index":360,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["generatesafeusername(givenname",{"_index":420,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["genericsuccessresponsedto",{"_index":217,"title":{"classes/GenericSuccessResponseDto.html":{}},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["gentoken",{"_index":938,"title":{},"body":{"classes/Util.html":{}}}],["gentoken(byte",{"_index":940,"title":{},"body":{"classes/Util.html":{}}}],["gethello",{"_index":53,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello(@req",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello(req",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["getsysteminfojson",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":1033,"title":{"index.html":{}},"body":{}}],["github",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{}}}],["github2",{"_index":373,"title":{},"body":{"injectables/GithubStrategy.html":{},"dependencies.html":{}}}],["githublogindto",{"_index":324,"title":{"classes/GithubLoginDto.html":{}},"body":{"classes/GithubLoginDto.html":{},"coverage.html":{}}}],["githubstrategy",{"_index":129,"title":{"injectables/GithubStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GithubStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["githubusername",{"_index":363,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["givenname",{"_index":423,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["givenname?.tolowercase().replace(/[^a",{"_index":440,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["global",{"_index":600,"title":{},"body":{"modules/PrismaModule.html":{},"modules/QueueModule.html":{}}}],["goal",{"_index":1048,"title":{},"body":{"index.html":{}}}],["goals",{"_index":1046,"title":{},"body":{"index.html":{}}}],["google",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"dependencies.html":{}}}],["googlelogindto",{"_index":409,"title":{"classes/GoogleLoginDto.html":{}},"body":{"classes/GoogleLoginDto.html":{},"coverage.html":{}}}],["googlestrategy",{"_index":130,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":1091,"title":{},"body":{"modules.html":{}}}],["handle",{"_index":1072,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":491,"title":{},"body":{"modules/MailModule.html":{}}}],["hash",{"_index":939,"title":{},"body":{"classes/Util.html":{}}}],["hash(text",{"_index":943,"title":{},"body":{"classes/Util.html":{}}}],["hashed",{"_index":947,"title":{},"body":{"classes/Util.html":{}}}],["helmet",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1050,"title":{},"body":{"index.html":{}}}],["host",{"_index":504,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{},"classes/ResponseException.html":{}}}],["host.switchtohttp",{"_index":710,"title":{},"body":{"classes/ResponseException.html":{}}}],["hours",{"_index":794,"title":{},"body":{"injectables/TaskService.html":{}}}],["http",{"_index":279,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["httpexception",{"_index":707,"title":{},"body":{"classes/ResponseException.html":{}}}],["https://avatars.githubusercontent.com/u/123456?v=4",{"_index":338,"title":{},"body":{"classes/GithubLoginDto.html":{}}}],["https://lh3.googleusercontent.com/a/default",{"_index":413,"title":{},"body":{"classes/GoogleLoginDto.html":{}}}],["httpstatus",{"_index":708,"title":{},"body":{"classes/ResponseException.html":{}}}],["httpstatus.internal_server_error",{"_index":715,"title":{},"body":{"classes/ResponseException.html":{}}}],["human",{"_index":195,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["id",{"_index":19,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/TaskService.html":{}}}],["identifier",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["ijwtpayload",{"_index":446,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["image",{"_index":925,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/gif",{"_index":915,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/jpeg",{"_index":917,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/jpg",{"_index":916,"title":{},"body":{"injectables/UploadService.html":{}}}],["image/png'].includes",{"_index":918,"title":{},"body":{"injectables/UploadService.html":{}}}],["implements",{"_index":700,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["import",{"_index":35,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["imports",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{}}}],["improvements",{"_index":1082,"title":{},"body":{"index.html":{}}}],["including",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indicates",{"_index":193,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["info.ts",{"_index":981,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["information",{"_index":276,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["initialize",{"_index":718,"title":{},"body":{"classes/ResponseException.html":{}}}],["inject",{"_index":374,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"injectables/TaskService.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["inject('aws_s3",{"_index":870,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["inject('logger",{"_index":790,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectable",{"_index":348,"title":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/TaskService.html":{},"injectables/UploadService.html":{}},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/TaskService.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["injectables",{"_index":349,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/TaskService.html":{},"injectables/UploadService.html":{},"overview.html":{}}}],["injectqueue",{"_index":590,"title":{},"body":{"injectables/MailService.html":{},"injectables/UploadService.html":{}}}],["injectqueue('mailer",{"_index":591,"title":{},"body":{"injectables/MailService.html":{}}}],["injectqueue('uploader",{"_index":905,"title":{},"body":{"injectables/UploadService.html":{}}}],["install",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["instanceof",{"_index":713,"title":{},"body":{"classes/ResponseException.html":{}}}],["integration",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["intercept",{"_index":735,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":736,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["interface",{"_index":445,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":447,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["internal",{"_index":727,"title":{},"body":{"classes/ResponseException.html":{}}}],["invalid",{"_index":640,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["ip",{"_index":651,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["isboolean",{"_index":835,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":820,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isdate",{"_index":836,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isdate()@isoptional",{"_index":825,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isdeleted",{"_index":798,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["isemail",{"_index":321,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":837,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isenum(userrole",{"_index":841,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isenum(userrole)@isoptional",{"_index":829,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isglobal",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["isjwt",{"_index":642,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["isnotempty",{"_index":38,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["iso",{"_index":284,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["isoptional",{"_index":838,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":39,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty({message",{"_index":670,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isstring()@isoptional",{"_index":823,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isurl",{"_index":345,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["job",{"_index":535,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"miscellaneous/typealiases.html":{}}}],["job.data.name",{"_index":573,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.reseturl",{"_index":574,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.to",{"_index":565,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.type",{"_index":561,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.username",{"_index":569,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.verificationlink",{"_index":570,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.data.year",{"_index":571,"title":{},"body":{"classes/MailProcessor.html":{}}}],["job.name",{"_index":558,"title":{},"body":{"classes/MailProcessor.html":{}}}],["john",{"_index":333,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["john.doe@example.com",{"_index":317,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["john.doe@gmail.com",{"_index":411,"title":{},"body":{"classes/GoogleLoginDto.html":{}}}],["john.doe@users.noreply.github.com",{"_index":330,"title":{},"body":{"classes/GithubLoginDto.html":{}}}],["john_doe_1234",{"_index":417,"title":{},"body":{"classes/GoogleLoginDto.html":{}}}],["john_doe_1234'})@isstring()@isnotempty({message",{"_index":416,"title":{},"body":{"classes/GoogleLoginDto.html":{}}}],["johndoe123",{"_index":676,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["johndoe_1234",{"_index":347,"title":{},"body":{"classes/GithubLoginDto.html":{}}}],["johndoe_1234'})@isstring()@isnotempty({message",{"_index":343,"title":{},"body":{"classes/GithubLoginDto.html":{}}}],["join",{"_index":493,"title":{},"body":{"modules/MailModule.html":{}}}],["join(process.cwd",{"_index":517,"title":{},"body":{"modules/MailModule.html":{}}}],["jwt",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"dependencies.html":{},"index.html":{}}}],["jwt'})@isstring()@isnotempty({message",{"_index":638,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["jwtaccessstrategy",{"_index":131,"title":{"injectables/JwtAccessStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":463,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["jwtmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshstrategy",{"_index":132,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":459,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"index.html":{}}}],["knowledge",{"_index":1055,"title":{},"body":{"index.html":{}}}],["last",{"_index":406,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["lastname",{"_index":441,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["learnings",{"_index":1078,"title":{},"body":{"index.html":{}}}],["legend",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["letter",{"_index":253,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["letters",{"_index":683,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["license",{"_index":1097,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["limiting",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["link",{"_index":22,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ResetPasswordDto.html":{}}}],["literal",{"_index":586,"title":{},"body":{"injectables/MailService.html":{},"classes/RegisterResponseDto.html":{},"miscellaneous/typealiases.html":{}}}],["logged",{"_index":198,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["logger",{"_index":764,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["logger(taskservice.name",{"_index":769,"title":{},"body":{"modules/TaskModule.html":{}}}],["login",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["login.dto.ts",{"_index":326,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:12",{"_index":331,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["login.dto.ts:20",{"_index":335,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["login.dto.ts:28",{"_index":344,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["login.dto.ts:38",{"_index":341,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["logindto",{"_index":470,"title":{"classes/LoginDto.html":{}},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["loginresponsedto",{"_index":192,"title":{"classes/LoginResponseDto.html":{}},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["logout",{"_index":228,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["logoutdto",{"_index":479,"title":{"classes/LogoutDto.html":{}},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["long",{"_index":257,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["long'})@matches(/^(?=.*[a",{"_index":246,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["long'})@matches(/^[a",{"_index":681,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["lowercase",{"_index":239,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["lt",{"_index":807,"title":{},"body":{"injectables/TaskService.html":{}}}],["m",{"_index":725,"title":{},"body":{"classes/ResponseException.html":{}}}],["made",{"_index":789,"title":{},"body":{"injectables/TaskService.html":{}}}],["mail",{"_index":519,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.processor",{"_index":496,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.service",{"_index":497,"title":{},"body":{"modules/MailModule.html":{}}}],["mailer",{"_index":500,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{}}}],["mailermodule",{"_index":488,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":501,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":530,"title":{},"body":{"classes/MailProcessor.html":{}}}],["mailjob",{"_index":533,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mailjobdata",{"_index":547,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mailmodule",{"_index":126,"title":{"modules/MailModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprocessor",{"_index":495,"title":{"classes/MailProcessor.html":{}},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"coverage.html":{}}}],["mailqueue",{"_index":584,"title":{},"body":{"injectables/MailService.html":{}}}],["mailservice",{"_index":486,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":298,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["management",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["map",{"_index":742,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["map((originalres",{"_index":749,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["match",{"_index":575,"title":{},"body":{"classes/MailProcessor.html":{},"classes/Util.html":{}}}],["match(text",{"_index":946,"title":{},"body":{"classes/Util.html":{}}}],["matches",{"_index":260,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matches(/^(?=.*[a",{"_index":262,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["matches(/^[a",{"_index":689,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["matching",{"_index":47,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["maxlength",{"_index":664,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["message",{"_index":44,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{}}}],["meta",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["metadata",{"_index":275,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"dependencies.html":{}}}],["method",{"_index":912,"title":{},"body":{"injectables/UploadService.html":{}}}],["methods",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["mime",{"_index":914,"title":{},"body":{"injectables/UploadService.html":{}}}],["mimetype",{"_index":928,"title":{},"body":{"injectables/UploadService.html":{}}}],["minlength",{"_index":32,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["minlength(2",{"_index":690,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["minlength(3",{"_index":688,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["minlength(8",{"_index":261,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["miscellaneous",{"_index":1025,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["module",{"_index":79,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["modules",{"_index":81,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/QueueModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":490,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":492,"title":{},"body":{"modules/MailModule.html":{}}}],["msg",{"_index":721,"title":{},"body":{"classes/ResponseException.html":{}}}],["msg.map((m",{"_index":724,"title":{},"body":{"classes/ResponseException.html":{}}}],["mysecurepassword123",{"_index":474,"title":{},"body":{"classes/LoginDto.html":{}}}],["name",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["name?.familyname",{"_index":434,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name?.givenname",{"_index":435,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["nestinterceptor",{"_index":734,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["nestjs",{"_index":489,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/bullmq",{"_index":539,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":834,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":370,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":766,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["networking",{"_index":1052,"title":{},"body":{"index.html":{}}}],["new",{"_index":188,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"coverage.html":{},"index.html":{}}}],["newpassword",{"_index":234,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["news",{"_index":1042,"title":{},"body":{"index.html":{}}}],["news/blogs",{"_index":1056,"title":{},"body":{"index.html":{}}}],["newsecurepassword123",{"_index":243,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["next",{"_index":738,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["next.handle().pipe",{"_index":748,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["nextjs",{"_index":1059,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":540,"title":{},"body":{"classes/MailProcessor.html":{}}}],["notfoundexception(`email",{"_index":576,"title":{},"body":{"classes/MailProcessor.html":{}}}],["null",{"_index":266,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ResponseException.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["nullable",{"_index":270,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["number",{"_index":240,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["numbers",{"_index":684,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["o.provider",{"_index":692,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["oauth",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["oauth20",{"_index":428,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":720,"title":{},"body":{"classes/ResponseException.html":{}}}],["objectives",{"_index":1047,"title":{},"body":{"index.html":{}}}],["observable",{"_index":741,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["obtaining",{"_index":187,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["occurred",{"_index":286,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["oldpassword",{"_index":235,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["oldpassword123",{"_index":256,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["one",{"_index":252,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["operation",{"_index":218,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["operational",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["optional",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"classes/ErrorResponseDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":522,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{}}}],["originalres?.data",{"_index":752,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["originalres?.message",{"_index":753,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["originalres?.meta",{"_index":754,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["otherwise",{"_index":398,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["out",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["overcame",{"_index":1069,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1036,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":986,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":378,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["partialtype",{"_index":833,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(registeruserdto",{"_index":815,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":376,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{}}}],["passport",{"_index":372,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":369,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["passportstrategy(strategy",{"_index":352,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["passreqtocallback",{"_index":469,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["password",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["password'})@isstring()@isnotempty({message",{"_index":244,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password.dto.ts",{"_index":233,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:12",{"_index":259,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:21",{"_index":697,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:23",{"_index":258,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:37",{"_index":696,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["password.dto.ts:39",{"_index":254,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password_changed",{"_index":224,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["password_reset",{"_index":227,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["password_reset_sent",{"_index":222,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["passwordresetemail",{"_index":580,"title":{},"body":{"injectables/MailService.html":{}}}],["passwordresetemail(data",{"_index":585,"title":{},"body":{"injectables/MailService.html":{}}}],["passwordresetmaildata",{"_index":545,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["path",{"_index":292,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"modules/MailModule.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/UploadService.html":{}}}],["path.extname(filename",{"_index":932,"title":{},"body":{"injectables/UploadService.html":{}}}],["pattern",{"_index":678,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["payload",{"_index":455,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["photo",{"_index":393,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["photos",{"_index":391,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["photos?.[0]?.value",{"_index":394,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":336,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["please",{"_index":319,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["port",{"_index":506,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{}}}],["portal",{"_index":1037,"title":{},"body":{"index.html":{}}}],["post",{"_index":1039,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":1061,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":396,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["present",{"_index":213,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["prisma",{"_index":775,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["prisma.service",{"_index":601,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["prisma/prisma.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":603,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":91,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":598,"title":{"injectables/PrismaService.html":{}},"body":{"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":353,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/MailService.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["problem",{"_index":1065,"title":{},"body":{"index.html":{}}}],["process",{"_index":528,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["process(job",{"_index":532,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["processor",{"_index":537,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{},"index.html":{}}}],["processor('mailer",{"_index":554,"title":{},"body":{"classes/MailProcessor.html":{}}}],["processor('uploader",{"_index":869,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["processors",{"_index":524,"title":{},"body":{"modules/MailModule.html":{}}}],["profile",{"_index":329,"title":{},"body":{"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{}}}],["profilepicture",{"_index":327,"title":{},"body":{"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{}}}],["project",{"_index":1035,"title":{},"body":{"index.html":{}}}],["promise",{"_index":536,"title":{},"body":{"classes/MailProcessor.html":{},"classes/ResponseInterceptor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["promise.all",{"_index":808,"title":{},"body":{"injectables/TaskService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"interfaces/IJwtPayload.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UploadService.html":{},"properties.html":{}}}],["provide",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{}}}],["provider",{"_index":208,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["provider.email",{"_index":693,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["providers",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["provides",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":579,"title":{},"body":{"injectables/MailService.html":{},"injectables/TaskService.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["putobjectcommand",{"_index":867,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["queue",{"_index":498,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"injectables/UploadService.html":{}}}],["queue/queue.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["queueing",{"_index":1076,"title":{},"body":{"index.html":{}}}],["queuemodule",{"_index":92,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["quick",{"_index":1084,"title":{},"body":{"index.html":{}}}],["randombytes",{"_index":951,"title":{},"body":{"classes/Util.html":{}}}],["randombytes(byte).tostring('hex",{"_index":955,"title":{},"body":{"classes/Util.html":{}}}],["rate",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["readable",{"_index":196,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["readonly",{"_index":10,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["received",{"_index":636,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["reflect",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{}}}],["refresh.strategy",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":465,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:25",{"_index":467,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:8",{"_index":466,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refreshtoken",{"_index":183,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["refreshtokendto",{"_index":631,"title":{"classes/RefreshTokenDto.html":{}},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["refreshtokenexp",{"_index":806,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{}}}],["refreshtokenresponsedto",{"_index":215,"title":{"classes/RefreshTokenResponseDto.html":{}},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["region",{"_index":855,"title":{},"body":{"modules/UploadModule.html":{}}}],["register",{"_index":613,"title":{},"body":{"modules/QueueModule.html":{}}}],["registered",{"_index":205,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["registerresponsedto",{"_index":646,"title":{"classes/RegisterResponseDto.html":{}},"body":{"classes/RegisterResponseDto.html":{},"coverage.html":{}}}],["registeruserdto",{"_index":658,"title":{"classes/RegisterUserDto.html":{}},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["registration",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{}}}],["registration'})@minlength(8",{"_index":671,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["remove",{"_index":778,"title":{},"body":{"injectables/TaskService.html":{}}}],["removeoncomplete",{"_index":617,"title":{},"body":{"modules/QueueModule.html":{}}}],["removeonfail",{"_index":622,"title":{},"body":{"modules/QueueModule.html":{}}}],["removerefreshtoken",{"_index":771,"title":{},"body":{"injectables/TaskService.html":{}}}],["reply",{"_index":512,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["req",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["req.protocol}://${req.get('host')}/v1/api/docs",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["request.url",{"_index":731,"title":{},"body":{"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["request/response",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["requesttimeoutexception",{"_index":868,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["requesttimeoutexception(error",{"_index":883,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["required",{"_index":27,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["required'})@isjwt({message",{"_index":639,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["required'})@isurl",{"_index":340,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["required'})@minlength(2",{"_index":666,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["required'})@minlength(3",{"_index":680,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["required'})@minlength(8",{"_index":245,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/LoginDto.html":{},"classes/ResetPasswordDto.html":{}}}],["resent",{"_index":230,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["reset",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"modules/UploadModule.html":{},"overview.html":{}}}],["reset.hbs",{"_index":572,"title":{},"body":{"classes/MailProcessor.html":{}}}],["resetpassworddto",{"_index":694,"title":{"classes/ResetPasswordDto.html":{}},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["resettoken",{"_index":816,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["resettokenexp",{"_index":817,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reseturl",{"_index":546,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["response",{"_index":277,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["response.dto.ts",{"_index":181,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":186,"title":{},"body":{"classes/AuthTokensDto.html":{}}}],["response.dto.ts:100",{"_index":323,"title":{},"body":{"classes/GenericSuccessResponseDto.html":{}}}],["response.dto.ts:131",{"_index":322,"title":{},"body":{"classes/GenericSuccessResponseDto.html":{}}}],["response.dto.ts:14",{"_index":649,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["response.dto.ts:18",{"_index":191,"title":{},"body":{"classes/AuthTokensDto.html":{}}}],["response.dto.ts:26",{"_index":478,"title":{},"body":{"classes/LoginResponseDto.html":{},"classes/RegisterResponseDto.html":{}}}],["response.dto.ts:32",{"_index":477,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["response.dto.ts:38",{"_index":476,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["response.dto.ts:46",{"_index":758,"title":{},"body":{"classes/SocialLoginResponseDto.html":{}}}],["response.dto.ts:65",{"_index":757,"title":{},"body":{"classes/SocialLoginResponseDto.html":{}}}],["response.dto.ts:72",{"_index":756,"title":{},"body":{"classes/SocialLoginResponseDto.html":{}}}],["response.dto.ts:8",{"_index":650,"title":{},"body":{"classes/RegisterResponseDto.html":{}}}],["response.dto.ts:80",{"_index":645,"title":{},"body":{"classes/RefreshTokenResponseDto.html":{}}}],["response.dto.ts:86",{"_index":644,"title":{},"body":{"classes/RefreshTokenResponseDto.html":{}}}],["response.dto.ts:92",{"_index":643,"title":{},"body":{"classes/RefreshTokenResponseDto.html":{}}}],["response.status(status).json",{"_index":729,"title":{},"body":{"classes/ResponseException.html":{}}}],["response.statuscode",{"_index":750,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["responseexception",{"_index":698,"title":{"classes/ResponseException.html":{}},"body":{"classes/ResponseException.html":{},"coverage.html":{}}}],["responseinterceptor",{"_index":732,"title":{"classes/ResponseInterceptor.html":{}},"body":{"classes/ResponseInterceptor.html":{},"coverage.html":{}}}],["responsetime",{"_index":654,"title":{},"body":{"classes/RegisterResponseDto.html":{},"classes/ResponseInterceptor.html":{}}}],["result",{"_index":197,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{}}}],["results",{"_index":46,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/ResponseInterceptor.html":{},"injectables/TaskService.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["revoked",{"_index":216,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["role",{"_index":818,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["run",{"_index":792,"title":{},"body":{"injectables/TaskService.html":{}}}],["rxjs",{"_index":743,"title":{},"body":{"classes/ResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":850,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"dependencies.html":{}}}],["s3client",{"_index":847,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{}}}],["schedulemodule",{"_index":765,"title":{},"body":{"modules/TaskModule.html":{}}}],["schedulemodule.forroot",{"_index":768,"title":{},"body":{"modules/TaskModule.html":{}}}],["schemas",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["scope",{"_index":386,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["screenshots",{"_index":1079,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["sdk/client",{"_index":849,"title":{},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"dependencies.html":{}}}],["seconds",{"_index":1032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":458,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["secretaccesskey",{"_index":860,"title":{},"body":{"modules/UploadModule.html":{}}}],["secretorkey",{"_index":460,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["securepassword123",{"_index":668,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["security",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["send",{"_index":552,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["sendaccountverifyemail",{"_index":581,"title":{},"body":{"injectables/MailService.html":{}}}],["sendaccountverifyemail(data",{"_index":588,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":223,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["serialization",{"_index":1064,"title":{},"body":{"index.html":{}}}],["server",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"classes/ResponseException.html":{}}}],["service",{"_index":375,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/TaskService.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["services",{"_index":525,"title":{},"body":{"modules/MailModule.html":{}}}],["session",{"_index":212,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["set",{"_index":550,"title":{},"body":{"classes/MailProcessor.html":{}}}],["setup",{"_index":499,"title":{},"body":{"modules/MailModule.html":{}}}],["social",{"_index":201,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["socialloginresponsedto",{"_index":200,"title":{"classes/SocialLoginResponseDto.html":{}},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["soft",{"_index":795,"title":{},"body":{"injectables/TaskService.html":{}}}],["softdeleteunverifieduser",{"_index":772,"title":{},"body":{"injectables/TaskService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{}}}],["special",{"_index":241,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["specific",{"_index":305,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["specifications",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["src",{"_index":518,"title":{},"body":{"modules/MailModule.html":{}}}],["src/.../mail.processor.ts",{"_index":1102,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../system",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/account",{"_index":6,"title":{},"body":{"classes/AccountVerifyDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth",{"_index":180,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"coverage.html":{}}}],["src/auth/dto/change",{"_index":232,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":659,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/forget",{"_index":315,"title":{},"body":{"classes/ForgetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/github",{"_index":325,"title":{},"body":{"classes/GithubLoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/google",{"_index":410,"title":{},"body":{"classes/GoogleLoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":471,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts",{"_index":480,"title":{},"body":{"classes/LogoutDto.html":{},"coverage.html":{}}}],["src/auth/dto/logout.dto.ts:12",{"_index":481,"title":{},"body":{"classes/LogoutDto.html":{}}}],["src/auth/dto/refresh",{"_index":632,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":647,"title":{},"body":{"classes/RegisterResponseDto.html":{},"coverage.html":{}}}],["src/auth/dto/reset",{"_index":695,"title":{},"body":{"classes/ResetPasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":814,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/strategies/github.strategy.ts",{"_index":350,"title":{},"body":{"injectables/GithubStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/github.strategy.ts:21",{"_index":367,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/auth/strategies/github.strategy.ts:38",{"_index":362,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/auth/strategies/github.strategy.ts:7",{"_index":358,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":418,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:22",{"_index":426,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:40",{"_index":422,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:7",{"_index":419,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt",{"_index":450,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/types/index.ts",{"_index":448,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["src/common/response.exception.ts",{"_index":699,"title":{},"body":{"classes/ResponseException.html":{},"coverage.html":{}}}],["src/common/response.exception.ts:12",{"_index":705,"title":{},"body":{"classes/ResponseException.html":{}}}],["src/common/response.interceptor.ts",{"_index":733,"title":{},"body":{"classes/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/response.interceptor.ts:5",{"_index":740,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["src/mail/mail.module",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mail/mail.module.ts",{"_index":487,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.processor.ts",{"_index":526,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/mail/mail.processor.ts:30",{"_index":531,"title":{},"body":{"classes/MailProcessor.html":{}}}],["src/mail/mail.processor.ts:35",{"_index":534,"title":{},"body":{"classes/MailProcessor.html":{}}}],["src/mail/mail.service.ts",{"_index":578,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:13",{"_index":589,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:23",{"_index":587,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:6",{"_index":583,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":599,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":787,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":602,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/queue/queue.module",{"_index":494,"title":{},"body":{"modules/MailModule.html":{}}}],["src/queue/queue.module.ts",{"_index":605,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/task/task.module.ts",{"_index":763,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/task/task.service.ts",{"_index":770,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/task/task.service.ts:20",{"_index":784,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:37",{"_index":781,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/task/task.service.ts:6",{"_index":774,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/upload/upload.module",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/upload/upload.module.ts",{"_index":846,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/upload.processor.ts",{"_index":863,"title":{},"body":{"classes/UploadProcessor.html":{},"coverage.html":{}}}],["src/upload/upload.processor.ts:15",{"_index":866,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["src/upload/upload.processor.ts:7",{"_index":865,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["src/upload/upload.service.ts",{"_index":884,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/upload/upload.service.ts:10",{"_index":901,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:11",{"_index":891,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:27",{"_index":895,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:48",{"_index":897,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/upload/upload.service.ts:55",{"_index":900,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/utils/system",{"_index":980,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/util",{"_index":904,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/utils/util.ts",{"_index":936,"title":{},"body":{"classes/Util.html":{},"coverage.html":{}}}],["src/utils/util.ts:13",{"_index":941,"title":{},"body":{"classes/Util.html":{}}}],["src/utils/util.ts:5",{"_index":944,"title":{},"body":{"classes/Util.html":{}}}],["src/utils/util.ts:9",{"_index":948,"title":{},"body":{"classes/Util.html":{}}}],["stack",{"_index":1057,"title":{},"body":{"index.html":{}}}],["standard",{"_index":294,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["started",{"_index":1034,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":746,"title":{},"body":{"classes/ResponseInterceptor.html":{}}}],["statements",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":937,"title":{},"body":{"classes/Util.html":{}}}],["status",{"_index":280,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{}}}],["statuscode",{"_index":283,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["strategies/github.strategy",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/google.strategy",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":371,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["strict",{"_index":523,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/SocialLoginResponseDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"miscellaneous/functions.html":{}}}],["structure",{"_index":295,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["sub",{"_index":449,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["subject",{"_index":566,"title":{},"body":{"classes/MailProcessor.html":{}}}],["success",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{}}}],["successful",{"_index":194,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{}}}],["successfully",{"_index":199,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["suggestions",{"_index":1044,"title":{},"body":{"index.html":{}}}],["super",{"_index":379,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["support",{"_index":1088,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":921,"title":{},"body":{"injectables/UploadService.html":{}}}],["svg",{"_index":1089,"title":{},"body":{"modules.html":{}}}],["swagger/openapi",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["switch",{"_index":557,"title":{},"body":{"classes/MailProcessor.html":{}}}],["table",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["task.service",{"_index":767,"title":{},"body":{"modules/TaskModule.html":{}}}],["task/task.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["taskmodule",{"_index":93,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskservice",{"_index":762,"title":{"injectables/TaskService.html":{}},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["tech",{"_index":1041,"title":{},"body":{"index.html":{}}}],["template",{"_index":515,"title":{},"body":{"modules/MailModule.html":{},"classes/MailProcessor.html":{}}}],["templates",{"_index":520,"title":{},"body":{"modules/MailModule.html":{}}}],["text",{"_index":945,"title":{},"body":{"classes/Util.html":{}}}],["this.bucketname",{"_index":910,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.cloudfronturl",{"_index":907,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.cloudfronturl}/${filename",{"_index":935,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.config.get",{"_index":908,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.config.get('aws_public_bucket",{"_index":911,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.enqueueupload(file",{"_index":934,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.generatefilename(file.originalname",{"_index":923,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.generatesafeusername(name?.givenname",{"_index":433,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["this.generatesafeusername(username",{"_index":395,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["this.logger.debug(`${expiredusers.length",{"_index":812,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.logger.debug(`${result.count",{"_index":799,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.mailerservice.sendmail",{"_index":564,"title":{},"body":{"classes/MailProcessor.html":{}}}],["this.mailqueue.add('account",{"_index":593,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailqueue.add('reset",{"_index":594,"title":{},"body":{"injectables/MailService.html":{}}}],["this.prisma.user.findmany",{"_index":805,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.prisma.user.update",{"_index":810,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.prisma.user.updatemany",{"_index":796,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.s3.send(command",{"_index":882,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["this.uploadqueue.add('upload",{"_index":924,"title":{},"body":{"injectables/UploadService.html":{}}}],["throttlerguard",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlers",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":562,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{}}}],["time",{"_index":291,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/MailProcessor.html":{}}}],["timestamp",{"_index":285,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RegisterResponseDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{}}}],["timezone",{"_index":779,"title":{},"body":{"injectables/TaskService.html":{}}}],["token",{"_index":30,"title":{},"body":{"classes/AccountVerifyDto.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{}}}],["token.dto.ts",{"_index":633,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:13",{"_index":641,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.dto.ts:22",{"_index":635,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["tokens",{"_index":189,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["topics",{"_index":1043,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":503,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthTokensDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginResponseDto.html":{},"modules/MailModule.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{}}}],["true})@isemail",{"_index":661,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["try",{"_index":872,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["ttl",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/AccountVerifyDto.html":{},"controllers/AppController.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"modules/QueueModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/ResponseException.html":{},"classes/ResponseInterceptor.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"classes/UpdateUserDto.html":{},"classes/UploadProcessor.html":{},"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1100,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":719,"title":{},"body":{"classes/ResponseException.html":{}}}],["types",{"_index":457,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{},"classes/MailProcessor.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["uid",{"_index":11,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ResetPasswordDto.html":{}}}],["undefined",{"_index":309,"title":{},"body":{"classes/ErrorResponseDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/RegisterResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResponseException.html":{},"classes/SocialLoginResponseDto.html":{}}}],["underscores",{"_index":685,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["unique",{"_index":675,"title":{},"body":{"classes/RegisterUserDto.html":{},"injectables/UploadService.html":{}}}],["uniqueitems",{"_index":660,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["unknown",{"_index":388,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["unlicensed",{"_index":1098,"title":{},"body":{"properties.html":{}}}],["unverified",{"_index":800,"title":{},"body":{"injectables/TaskService.html":{}}}],["up",{"_index":1086,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":813,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["upload",{"_index":871,"title":{},"body":{"classes/UploadProcessor.html":{}}}],["upload.processor",{"_index":852,"title":{},"body":{"modules/UploadModule.html":{}}}],["upload.service",{"_index":853,"title":{},"body":{"modules/UploadModule.html":{}}}],["uploadandgeturl",{"_index":889,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadandgeturl(file",{"_index":899,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploader",{"_index":614,"title":{},"body":{"modules/QueueModule.html":{},"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":127,"title":{"modules/UploadModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadprocessor",{"_index":851,"title":{"classes/UploadProcessor.html":{}},"body":{"modules/UploadModule.html":{},"classes/UploadProcessor.html":{},"coverage.html":{}}}],["uploadqueue",{"_index":892,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploads",{"_index":1068,"title":{},"body":{"index.html":{}}}],["uploadservice",{"_index":845,"title":{"injectables/UploadService.html":{}},"body":{"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uppercase",{"_index":238,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["upvote/downvote",{"_index":1045,"title":{},"body":{"index.html":{}}}],["url",{"_index":337,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"injectables/UploadService.html":{}}}],["url'})@isstring()@isnotempty({message",{"_index":339,"title":{},"body":{"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{}}}],["use",{"_index":399,"title":{},"body":{"injectables/GithubStrategy.html":{},"modules/MailModule.html":{},"classes/MailProcessor.html":{}}}],["useclass",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":502,"title":{},"body":{"modules/MailModule.html":{},"modules/QueueModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{}}}],["user",{"_index":18,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/AuthTokensDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GenericSuccessResponseDto.html":{},"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/LogoutDto.html":{},"modules/MailModule.html":{},"classes/RefreshTokenDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SocialLoginResponseDto.html":{},"injectables/TaskService.html":{},"index.html":{}}}],["user.dto",{"_index":840,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":472,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":473,"title":{},"body":{"classes/LoginDto.html":{}}}],["user.dto.ts:15",{"_index":830,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":824,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:23",{"_index":475,"title":{},"body":{"classes/LoginDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:26",{"_index":686,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:27",{"_index":831,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":832,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:35",{"_index":826,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":667,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:39",{"_index":827,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:43",{"_index":822,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:46",{"_index":821,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:47",{"_index":662,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:65",{"_index":672,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:73",{"_index":674,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":811,"title":{},"body":{"injectables/TaskService.html":{}}}],["user:email",{"_index":387,"title":{},"body":{"injectables/GithubStrategy.html":{}}}],["user=s96",{"_index":414,"title":{},"body":{"classes/GoogleLoginDto.html":{}}}],["username",{"_index":328,"title":{},"body":{"classes/GithubLoginDto.html":{},"injectables/GithubStrategy.html":{},"classes/GoogleLoginDto.html":{},"injectables/GoogleStrategy.html":{},"classes/MailProcessor.html":{},"injectables/MailService.html":{},"classes/RegisterUserDto.html":{}}}],["userrole",{"_index":828,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["users",{"_index":801,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["util",{"_index":903,"title":{"classes/Util.html":{}},"body":{"injectables/UploadService.html":{},"classes/Util.html":{},"coverage.html":{}}}],["util.gentoken(16",{"_index":930,"title":{},"body":{"injectables/UploadService.html":{}}}],["utils/system",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["uuid",{"_index":45,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{},"injectables/UploadService.html":{}}}],["uuid'})@isstring()@isnotempty({message",{"_index":26,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/ResetPasswordDto.html":{}}}],["uuid}${ext",{"_index":933,"title":{},"body":{"injectables/UploadService.html":{}}}],["valid",{"_index":272,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/RegisterUserDto.html":{}}}],["validate",{"_index":355,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["validate(_accesstoken",{"_index":365,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":453,"title":{},"body":{"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["validateif",{"_index":687,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["validateif((o",{"_index":691,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["validation",{"_index":302,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{},"classes/ResponseException.html":{}}}],["validator",{"_index":40,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/ChangePasswordDto.html":{},"classes/ForgetPasswordDto.html":{},"classes/GithubLoginDto.html":{},"classes/GoogleLoginDto.html":{},"classes/LoginDto.html":{},"classes/LogoutDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["valuable",{"_index":1054,"title":{},"body":{"index.html":{}}}],["value",{"_index":202,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{},"classes/Util.html":{}}}],["values",{"_index":377,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAccessStrategy.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["verification",{"_index":20,"title":{},"body":{"classes/AccountVerifyDto.html":{},"modules/AuthModule.html":{},"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/MailProcessor.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["verification_sent",{"_index":229,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["verificationlink",{"_index":543,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["verificationmaildata",{"_index":542,"title":{},"body":{"classes/MailProcessor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verified",{"_index":221,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["verify",{"_index":560,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["verify.dto.ts",{"_index":7,"title":{},"body":{"classes/AccountVerifyDto.html":{},"coverage.html":{}}}],["verify.dto.ts:12",{"_index":34,"title":{},"body":{"classes/AccountVerifyDto.html":{}}}],["verify.dto.ts:21",{"_index":29,"title":{},"body":{"classes/AccountVerifyDto.html":{}}}],["verify.hbs",{"_index":567,"title":{},"body":{"classes/MailProcessor.html":{}}}],["verifycallback",{"_index":425,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["verifytoken",{"_index":12,"title":{},"body":{"classes/AccountVerifyDto.html":{},"classes/UpdateUserDto.html":{}}}],["verifytokenexp",{"_index":819,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["version",{"_index":1095,"title":{},"body":{"properties.html":{}}}],["via",{"_index":210,"title":{},"body":{"classes/AuthTokensDto.html":{},"classes/GenericSuccessResponseDto.html":{},"classes/LoginResponseDto.html":{},"classes/RefreshTokenResponseDto.html":{},"classes/SocialLoginResponseDto.html":{}}}],["void",{"_index":427,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/ResponseException.html":{}}}],["well",{"_index":1073,"title":{},"body":{"index.html":{}}}],["went",{"_index":300,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["workerhost",{"_index":538,"title":{},"body":{"classes/MailProcessor.html":{},"classes/UploadProcessor.html":{}}}],["wrap",{"_index":1085,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":301,"title":{},"body":{"classes/ErrorFieldDto.html":{},"classes/ErrorMetaDto.html":{},"classes/ErrorResponseDto.html":{}}}],["year",{"_index":544,"title":{},"body":{"classes/MailProcessor.html":{},"injectables/MailService.html":{}}}],["yes",{"_index":364,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["z0",{"_index":402,"title":{},"body":{"injectables/GithubStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/RegisterUserDto.html":{}}}],["z\\d",{"_index":250,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":247,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":248,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["za",{"_index":249,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/RegisterUserDto.html":{},"classes/ResetPasswordDto.html":{}}}],["zoom",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/PrismaModule.html":{},"modules/TaskModule.html":{},"modules/UploadModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccountVerifyDto.html":{"url":"classes/AccountVerifyDto.html","title":"class - AccountVerifyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountVerifyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/account-verify.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                uid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID from the verification email link', example: 'clm1234567890abcdef', format: 'uuid'})@IsString()@IsNotEmpty({message: 'User ID is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/account-verify.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        verifyToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email verification token from the verification email link', example: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456', minLength: 32})@IsString()@IsNotEmpty({message: 'Verification token is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/account-verify.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AccountVerifyDto {\n  @ApiProperty({\n    description: 'Email verification token from the verification email link',\n    example: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456',\n    minLength: 32,\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Verification token is required' })\n  readonly verifyToken: string;\n\n  @ApiProperty({\n    description: 'User ID from the verification email link',\n    example: 'clm1234567890abcdef',\n    format: 'uuid',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'User ID is required' })\n  readonly uid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { success: boolean; message: string; data: { api_docs: string; }; meta: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { ApiExcludeController } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { getSystemInfoJson } from './utils/system-info';\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n  constructor() {}\n\n  @Get()\n  getHello(@Req() req: Request) {\n    return {\n      success: true,\n      message: 'Server is operational',\n      data: {\n        api_docs: `${req.protocol}://${req.get('host')}/v1/api/docs`,\n      },\n      meta: getSystemInfoJson(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            TaskModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { AppController } from './app.controller';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { QueueModule } from './queue/queue.module';\nimport { TaskModule } from './task/task.module';\n\n@Module({\n  imports: [\n    TaskModule,\n    ThrottlerModule.forRoot({\n      throttlers: [\n        {\n          ttl: 60,\n          limit: 100,\n        },\n      ],\n    }),\n    QueueModule,\n    PrismaModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAuthModule -->\n\nUploadModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGithubStrategy\n\nGithubStrategy\n\nAuthModule -->\n\nGithubStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Authentication Module\nProvides comprehensive authentication functionality including:\n\nEmail/password registration and login\nGoogle OAuth integration\nGitHub OAuth integration\nJWT access and refresh token management\nEmail verification\nPassword reset functionality\nRate limiting and security features\n\nAll endpoints are fully documented with Swagger/OpenAPI specifications\nincluding detailed request/response schemas, examples, and error codes.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GithubStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtAccessStrategy\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            UploadModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MailModule } from 'src/mail/mail.module';\nimport { UploadModule } from 'src/upload/upload.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { GithubStrategy } from './strategies/github.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { JwtAccessStrategy } from './strategies/jwt-access.strategy';\nimport { JwtRefreshStrategy } from './strategies/jwt-refresh.strategy';\n\n/**\n * Authentication Module\n *\n * Provides comprehensive authentication functionality including:\n * - Email/password registration and login\n * - Google OAuth integration\n * - GitHub OAuth integration\n * - JWT access and refresh token management\n * - Email verification\n * - Password reset functionality\n * - Rate limiting and security features\n *\n * All endpoints are fully documented with Swagger/OpenAPI specifications\n * including detailed request/response schemas, examples, and error codes.\n */\n@Module({\n  imports: [UploadModule, JwtModule.register({}), MailModule],\n  providers: [\n    AuthService,\n    JwtAccessStrategy,\n    JwtRefreshStrategy,\n    GoogleStrategy,\n    GithubStrategy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthTokensDto.html":{"url":"classes/AuthTokensDto.html","title":"class - AuthTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT access token for API authentication', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c', format: 'jwt'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT refresh token for obtaining new access tokens', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.rTCH8Q2iys_2KqVrYhRGkq2KYdG2oUlmfHqR1UHwzUw', format: 'jwt'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthTokensDto {\n  @ApiProperty({\n    description: 'JWT access token for API authentication',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n    format: 'jwt',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'JWT refresh token for obtaining new access tokens',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.rTCH8Q2iys_2KqVrYhRGkq2KYdG2oUlmfHqR1UHwzUw',\n    format: 'jwt',\n  })\n  refreshToken: string;\n}\n\nexport class LoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the login result',\n    example: 'Logged in successfully!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class SocialLoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the social login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the social login result',\n    examples: {\n      success: {\n        value: 'Google login successful',\n        description: 'Successful Google OAuth login',\n      },\n      existing_user: {\n        value: 'User already registered with email',\n        description: 'User exists with different provider',\n      },\n      already_logged_in: {\n        value: 'User already logged in via google',\n        description: 'User has active session',\n      },\n    },\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens (only present on successful login)',\n    type: AuthTokensDto,\n    required: false,\n  })\n  data?: AuthTokensDto;\n}\n\nexport class RefreshTokenResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the token refresh was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the refresh result',\n    example: 'New tokens revoked!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'New authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class GenericSuccessResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the operation was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the operation result',\n    examples: {\n      account_verified: {\n        value: 'Account email verified',\n        description: 'Email verification successful',\n      },\n      password_reset_sent: {\n        value: 'Password reset email sent',\n        description: 'Password reset email sent successfully',\n      },\n      password_changed: {\n        value: 'Password changed successfully',\n        description: 'Password change successful',\n      },\n      password_reset: {\n        value: 'Password successfully reset',\n        description: 'Password reset successful',\n      },\n      logout: {\n        value: 'User logged out successfully!',\n        description: 'Logout successful',\n      },\n      verification_sent: {\n        value: 'Verification email sent!',\n        description: 'Verification email resent successfully',\n      },\n    },\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                oldPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                uid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New password (must be at least 8 characters with uppercase, lowercase, number, and special character)', example: 'NewSecurePassword123!', minLength: 8, format: 'password'})@IsString()@IsNotEmpty({message: 'New password is required'})@MinLength(8, {message: 'New password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'New password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Current password', example: 'OldPassword123!', minLength: 8, format: 'password'})@IsString()@IsNotEmpty({message: 'Current password is required'})@MinLength(8, {message: 'Password must be at least 8 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID', example: 'clm1234567890abcdef', format: 'uuid'})@IsString()@IsNotEmpty({message: 'User ID is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'User ID',\n    example: 'clm1234567890abcdef',\n    format: 'uuid',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'User ID is required' })\n  readonly uid: string;\n\n  @ApiProperty({\n    description: 'Current password',\n    example: 'OldPassword123!',\n    minLength: 8,\n    format: 'password',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Current password is required' })\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  readonly oldPassword: string;\n\n  @ApiProperty({\n    description:\n      'New password (must be at least 8 characters with uppercase, lowercase, number, and special character)',\n    example: 'NewSecurePassword123!',\n    minLength: 8,\n    format: 'password',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'New password is required' })\n  @MinLength(8, { message: 'New password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'New password must contain at least one uppercase letter, one lowercase letter, one number, and one special character',\n  })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorFieldDto.html":{"url":"classes/ErrorFieldDto.html","title":"class - ErrorFieldDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorFieldDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-error.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                field\n                            \n                            \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The field name that caused the error, null for general errors', example: 'email', nullable: true, type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Detailed error message for the field', example: 'email must be a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorFieldDto {\n  @ApiProperty({\n    description:\n      'The field name that caused the error, null for general errors',\n    example: 'email',\n    nullable: true,\n    type: 'string',\n  })\n  field: string | null;\n\n  @ApiProperty({\n    description: 'Detailed error message for the field',\n    example: 'email must be a valid email address',\n  })\n  message: string;\n}\n\n/**\n * Metadata information about the error response\n */\nexport class ErrorMetaDto {\n  @ApiProperty({\n    description: 'HTTP status code of the error',\n    example: 400,\n    type: 'number',\n  })\n  statusCode: number;\n\n  @ApiProperty({\n    description: 'ISO timestamp when the error occurred',\n    example: '2024-01-15T10:30:45.123Z',\n    type: 'string',\n    format: 'date-time',\n  })\n  timestamp: string;\n\n  @ApiProperty({\n    description: 'Request path where the error occurred',\n    example: '/api/auth/login',\n    type: 'string',\n  })\n  path: string;\n}\n\n/**\n * Standard error response structure\n */\nexport class ErrorResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the request was successful',\n    example: false,\n    type: 'boolean',\n    default: false,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Main error message describing what went wrong',\n    example: 'Validation failed',\n    type: 'string',\n  })\n  message: string;\n\n  @ApiProperty({\n    description:\n      'Array of detailed field-specific errors (present for validation errors)',\n    type: [ErrorFieldDto],\n    required: false,\n    nullable: true,\n    example: [\n      {\n        field: 'email',\n        message: 'email must be a valid email address',\n      },\n      {\n        field: 'password',\n        message: 'password must be at least 8 characters long',\n      },\n    ],\n  })\n  errors?: ErrorFieldDto[];\n\n  @ApiProperty({\n    description: 'Metadata about the error response',\n    type: ErrorMetaDto,\n    example: {\n      statusCode: 400,\n      timestamp: '2024-01-15T10:30:45.123Z',\n      path: '/api/auth/login',\n    },\n  })\n  meta: ErrorMetaDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorMetaDto.html":{"url":"classes/ErrorMetaDto.html","title":"class - ErrorMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-error.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Metadata information about the error response\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                statusCode\n                            \n                            \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Request path where the error occurred', example: '/api/auth/login', type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'HTTP status code of the error', example: 400, type: 'number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ISO timestamp when the error occurred', example: '2024-01-15T10:30:45.123Z', type: 'string', format: 'date-time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorFieldDto {\n  @ApiProperty({\n    description:\n      'The field name that caused the error, null for general errors',\n    example: 'email',\n    nullable: true,\n    type: 'string',\n  })\n  field: string | null;\n\n  @ApiProperty({\n    description: 'Detailed error message for the field',\n    example: 'email must be a valid email address',\n  })\n  message: string;\n}\n\n/**\n * Metadata information about the error response\n */\nexport class ErrorMetaDto {\n  @ApiProperty({\n    description: 'HTTP status code of the error',\n    example: 400,\n    type: 'number',\n  })\n  statusCode: number;\n\n  @ApiProperty({\n    description: 'ISO timestamp when the error occurred',\n    example: '2024-01-15T10:30:45.123Z',\n    type: 'string',\n    format: 'date-time',\n  })\n  timestamp: string;\n\n  @ApiProperty({\n    description: 'Request path where the error occurred',\n    example: '/api/auth/login',\n    type: 'string',\n  })\n  path: string;\n}\n\n/**\n * Standard error response structure\n */\nexport class ErrorResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the request was successful',\n    example: false,\n    type: 'boolean',\n    default: false,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Main error message describing what went wrong',\n    example: 'Validation failed',\n    type: 'string',\n  })\n  message: string;\n\n  @ApiProperty({\n    description:\n      'Array of detailed field-specific errors (present for validation errors)',\n    type: [ErrorFieldDto],\n    required: false,\n    nullable: true,\n    example: [\n      {\n        field: 'email',\n        message: 'email must be a valid email address',\n      },\n      {\n        field: 'password',\n        message: 'password must be at least 8 characters long',\n      },\n    ],\n  })\n  errors?: ErrorFieldDto[];\n\n  @ApiProperty({\n    description: 'Metadata about the error response',\n    type: ErrorMetaDto,\n    example: {\n      statusCode: 400,\n      timestamp: '2024-01-15T10:30:45.123Z',\n      path: '/api/auth/login',\n    },\n  })\n  meta: ErrorMetaDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorResponseDto.html":{"url":"classes/ErrorResponseDto.html","title":"class - ErrorResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-error.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Standard error response structure\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                errors\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorFieldDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of detailed field-specific errors (present for validation errors)', type: undefined, required: false, nullable: true, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Main error message describing what went wrong', example: 'Validation failed', type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ErrorMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Metadata about the error response', type: ErrorMetaDto, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicates if the request was successful', example: false, type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-error.dto.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorFieldDto {\n  @ApiProperty({\n    description:\n      'The field name that caused the error, null for general errors',\n    example: 'email',\n    nullable: true,\n    type: 'string',\n  })\n  field: string | null;\n\n  @ApiProperty({\n    description: 'Detailed error message for the field',\n    example: 'email must be a valid email address',\n  })\n  message: string;\n}\n\n/**\n * Metadata information about the error response\n */\nexport class ErrorMetaDto {\n  @ApiProperty({\n    description: 'HTTP status code of the error',\n    example: 400,\n    type: 'number',\n  })\n  statusCode: number;\n\n  @ApiProperty({\n    description: 'ISO timestamp when the error occurred',\n    example: '2024-01-15T10:30:45.123Z',\n    type: 'string',\n    format: 'date-time',\n  })\n  timestamp: string;\n\n  @ApiProperty({\n    description: 'Request path where the error occurred',\n    example: '/api/auth/login',\n    type: 'string',\n  })\n  path: string;\n}\n\n/**\n * Standard error response structure\n */\nexport class ErrorResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the request was successful',\n    example: false,\n    type: 'boolean',\n    default: false,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Main error message describing what went wrong',\n    example: 'Validation failed',\n    type: 'string',\n  })\n  message: string;\n\n  @ApiProperty({\n    description:\n      'Array of detailed field-specific errors (present for validation errors)',\n    type: [ErrorFieldDto],\n    required: false,\n    nullable: true,\n    example: [\n      {\n        field: 'email',\n        message: 'email must be a valid email address',\n      },\n      {\n        field: 'password',\n        message: 'password must be at least 8 characters long',\n      },\n    ],\n  })\n  errors?: ErrorFieldDto[];\n\n  @ApiProperty({\n    description: 'Metadata about the error response',\n    type: ErrorMetaDto,\n    example: {\n      statusCode: 400,\n      timestamp: '2024-01-15T10:30:45.123Z',\n      path: '/api/auth/login',\n    },\n  })\n  meta: ErrorMetaDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgetPasswordDto.html":{"url":"classes/ForgetPasswordDto.html","title":"class - ForgetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/forget-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user who forgot their password', example: 'john.doe@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})@IsNotEmpty({message: 'Email is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/forget-password.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class ForgetPasswordDto {\n  @ApiProperty({\n    description: 'Email address of the user who forgot their password',\n    example: 'john.doe@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  @IsNotEmpty({ message: 'Email is required' })\n  readonly email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenericSuccessResponseDto.html":{"url":"classes/GenericSuccessResponseDto.html","title":"class - GenericSuccessResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenericSuccessResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Human-readable message about the operation result', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicates if the operation was successful', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:100\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthTokensDto {\n  @ApiProperty({\n    description: 'JWT access token for API authentication',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n    format: 'jwt',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'JWT refresh token for obtaining new access tokens',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.rTCH8Q2iys_2KqVrYhRGkq2KYdG2oUlmfHqR1UHwzUw',\n    format: 'jwt',\n  })\n  refreshToken: string;\n}\n\nexport class LoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the login result',\n    example: 'Logged in successfully!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class SocialLoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the social login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the social login result',\n    examples: {\n      success: {\n        value: 'Google login successful',\n        description: 'Successful Google OAuth login',\n      },\n      existing_user: {\n        value: 'User already registered with email',\n        description: 'User exists with different provider',\n      },\n      already_logged_in: {\n        value: 'User already logged in via google',\n        description: 'User has active session',\n      },\n    },\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens (only present on successful login)',\n    type: AuthTokensDto,\n    required: false,\n  })\n  data?: AuthTokensDto;\n}\n\nexport class RefreshTokenResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the token refresh was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the refresh result',\n    example: 'New tokens revoked!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'New authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class GenericSuccessResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the operation was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the operation result',\n    examples: {\n      account_verified: {\n        value: 'Account email verified',\n        description: 'Email verification successful',\n      },\n      password_reset_sent: {\n        value: 'Password reset email sent',\n        description: 'Password reset email sent successfully',\n      },\n      password_changed: {\n        value: 'Password changed successfully',\n        description: 'Password change successful',\n      },\n      password_reset: {\n        value: 'Password successfully reset',\n        description: 'Password reset successful',\n      },\n      logout: {\n        value: 'User logged out successfully!',\n        description: 'Logout successful',\n      },\n      verification_sent: {\n        value: 'Verification email sent!',\n        description: 'Verification email resent successfully',\n      },\n    },\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GithubLoginDto.html":{"url":"classes/GithubLoginDto.html","title":"class - GithubLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GithubLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/github-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                profilePicture\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address from GitHub OAuth profile', example: 'john.doe@users.noreply.github.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})@IsNotEmpty({message: 'Email is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Display name from GitHub OAuth profile', example: 'John Doe'})@IsString()@IsNotEmpty({message: 'Name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Profile picture URL from GitHub OAuth profile', example: 'https://avatars.githubusercontent.com/u/123456?v=4', format: 'url'})@IsString()@IsNotEmpty({message: 'Profile picture is required'})@IsUrl({}, {message: 'Profile picture must be a valid URL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Generated username from GitHub OAuth profile', example: 'johndoe_1234'})@IsString()@IsNotEmpty({message: 'Username is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/github-login.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, IsUrl } from 'class-validator';\n\nexport class GithubLoginDto {\n  @ApiProperty({\n    description: 'Email address from GitHub OAuth profile',\n    example: 'john.doe@users.noreply.github.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  @IsNotEmpty({ message: 'Email is required' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Display name from GitHub OAuth profile',\n    example: 'John Doe',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Name is required' })\n  name: string;\n\n  @ApiProperty({\n    description: 'Generated username from GitHub OAuth profile',\n    example: 'johndoe_1234',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Username is required' })\n  username: string;\n\n  @ApiProperty({\n    description: 'Profile picture URL from GitHub OAuth profile',\n    example: 'https://avatars.githubusercontent.com/u/123456?v=4',\n    format: 'url',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Profile picture is required' })\n  @IsUrl({}, { message: 'Profile picture must be a valid URL' })\n  profilePicture: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GithubStrategy.html":{"url":"injectables/GithubStrategy.html","title":"injectable - GithubStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GithubStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/github.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'github')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateSafeUsername\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/github.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateSafeUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateSafeUsername(githubUsername?: string, displayName?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/github.strategy.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                githubUsername\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                displayName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(_accessToken: string, _refreshToken: string, profile: Profile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/github.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy } from 'passport-github2';\n\n@Injectable()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass values to parent class\n    super({\n      clientID: config.get('GITHUB_CLIENT_ID') as string,\n      clientSecret: config.get('GITHUB_CLIENT_SECRET') as string,\n      callbackURL: config.get('GITHUB_CALLBACK_URL') as string,\n      scope: ['user:email'],\n    });\n  }\n  //validate user\n  validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: Profile,\n  ): unknown {\n    const { username, emails, displayName, photos } = profile;\n    const email = emails?.[0]?.value;\n    const photo = photos?.[0]?.value;\n    //return user\n    return {\n      username: this.generateSafeUsername(username, displayName),\n      email,\n      profilePicture: photo,\n      name: displayName || username || 'Unknown User',\n    };\n  }\n\n  private generateSafeUsername(\n    githubUsername?: string,\n    displayName?: string,\n  ): string {\n    // Prefer GitHub username if available, otherwise use display name\n    const baseUsername =\n      githubUsername ||\n      displayName?.toLowerCase().replace(/[^a-z0-9]/g, '') ||\n      'user';\n    const timestamp = Date.now().toString().slice(-4); // Last 4 digits of timestamp\n    return `${baseUsername}_${timestamp}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleLoginDto.html":{"url":"classes/GoogleLoginDto.html","title":"class - GoogleLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/google-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                profilePicture\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address from Google OAuth profile', example: 'john.doe@gmail.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})@IsNotEmpty({message: 'Email is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Full name from Google OAuth profile', example: 'John Doe'})@IsString()@IsNotEmpty({message: 'Name is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        profilePicture\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Profile picture URL from Google OAuth profile', example: 'https://lh3.googleusercontent.com/a/default-user=s96-c', format: 'url'})@IsString()@IsNotEmpty({message: 'Profile picture is required'})@IsUrl({}, {message: 'Profile picture must be a valid URL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Generated username from Google OAuth profile', example: 'john_doe_1234'})@IsString()@IsNotEmpty({message: 'Username is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/google-login.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, IsUrl } from 'class-validator';\n\nexport class GoogleLoginDto {\n  @ApiProperty({\n    description: 'Email address from Google OAuth profile',\n    example: 'john.doe@gmail.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  @IsNotEmpty({ message: 'Email is required' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Full name from Google OAuth profile',\n    example: 'John Doe',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Name is required' })\n  name: string;\n\n  @ApiProperty({\n    description: 'Generated username from Google OAuth profile',\n    example: 'john_doe_1234',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Username is required' })\n  username: string;\n\n  @ApiProperty({\n    description: 'Profile picture URL from Google OAuth profile',\n    example: 'https://lh3.googleusercontent.com/a/default-user=s96-c',\n    format: 'url',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Profile picture is required' })\n  @IsUrl({}, { message: 'Profile picture must be a valid URL' })\n  profilePicture: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateSafeUsername\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateSafeUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateSafeUsername(givenName?: string, familyName?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google.strategy.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                givenName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                familyName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(_accessToken: string, _refreshToken: string, profile: Profile, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Profile, Strategy, VerifyCallback } from 'passport-google-oauth20';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass values to parent class\n    super({\n      clientID: config.get('GOOGLE_CLIENT_ID') as string,\n      clientSecret: config.get('GOOGLE_CLIENT_SECRET') as string,\n      callbackURL: config.get('GOOGLE_CALLBACK_URL') as string,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  //validate user\n  validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: Profile,\n    done: VerifyCallback,\n  ): void {\n    const { name, emails, photos } = profile;\n    //formatted user\n    const user = {\n      email: emails?.[0]?.value,\n      username: this.generateSafeUsername(name?.givenName, name?.familyName),\n      name: (name?.givenName || '') + ' ' + (name?.familyName || ''),\n      profilePicture: photos?.[0]?.value,\n    };\n    //forward to callback\n    done(null, user);\n  }\n\n  private generateSafeUsername(\n    givenName?: string,\n    familyName?: string,\n  ): string {\n    const firstName =\n      givenName?.toLowerCase().replace(/[^a-z0-9]/g, '') || 'user';\n    const lastName = familyName?.toLowerCase().replace(/[^a-z0-9]/g, '') || '';\n    const timestamp = Date.now().toString().slice(-4); // Last 4 digits of timestamp\n    return lastName\n      ? `${firstName}_${lastName}_${timestamp}`\n      : `${firstName}_${timestamp}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/types/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJwtPayload {\n  sub: string;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessStrategy.html":{"url":"injectables/JwtAccessStrategy.html","title":"injectable - JwtAccessStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-access.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'access')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-access.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt-access.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IJwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IJwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IJwtPayload } from '../types';\n\n@Injectable()\nexport class JwtAccessStrategy extends PassportStrategy(Strategy, 'access') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass env values to parent class\n    super({\n      //secret key\n      secretOrKey: config.get('ACCESS_TOKEN_SECRET') as string,\n      //extract jwt from request\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  //validate and return the payload\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'refresh')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-refresh.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt-refresh.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IJwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IJwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { IJwtPayload } from '../types';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(Strategy, 'refresh') {\n  constructor(\n    //inject config service\n    private config: ConfigService,\n  ) {\n    //pass env values to parent class\n    super({\n      //secret key\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET') as string,\n      //extract jwt from request\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      // pass request to callback\n      passReqToCallback: true,\n    });\n  }\n\n  //validate and return the payload\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'john.doe@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})@IsNotEmpty({message: 'Email is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password', example: 'MySecurePassword123!', minLength: 8, format: 'password'})@IsString()@IsNotEmpty({message: 'Password is required'})@MinLength(8, {message: 'Password must be at least 8 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'john.doe@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  @IsNotEmpty({ message: 'Email is required' })\n  readonly email: string;\n\n  @ApiProperty({\n    description: 'User password',\n    example: 'MySecurePassword123!',\n    minLength: 8,\n    format: 'password',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Password is required' })\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponseDto.html":{"url":"classes/LoginResponseDto.html","title":"class - LoginResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthTokensDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authentication tokens', type: AuthTokensDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Human-readable message about the login result', example: 'Logged in successfully!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicates if the login was successful', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthTokensDto {\n  @ApiProperty({\n    description: 'JWT access token for API authentication',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n    format: 'jwt',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'JWT refresh token for obtaining new access tokens',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.rTCH8Q2iys_2KqVrYhRGkq2KYdG2oUlmfHqR1UHwzUw',\n    format: 'jwt',\n  })\n  refreshToken: string;\n}\n\nexport class LoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the login result',\n    example: 'Logged in successfully!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class SocialLoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the social login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the social login result',\n    examples: {\n      success: {\n        value: 'Google login successful',\n        description: 'Successful Google OAuth login',\n      },\n      existing_user: {\n        value: 'User already registered with email',\n        description: 'User exists with different provider',\n      },\n      already_logged_in: {\n        value: 'User already logged in via google',\n        description: 'User has active session',\n      },\n    },\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens (only present on successful login)',\n    type: AuthTokensDto,\n    required: false,\n  })\n  data?: AuthTokensDto;\n}\n\nexport class RefreshTokenResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the token refresh was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the refresh result',\n    example: 'New tokens revoked!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'New authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class GenericSuccessResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the operation was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the operation result',\n    examples: {\n      account_verified: {\n        value: 'Account email verified',\n        description: 'Email verification successful',\n      },\n      password_reset_sent: {\n        value: 'Password reset email sent',\n        description: 'Password reset email sent successfully',\n      },\n      password_changed: {\n        value: 'Password changed successfully',\n        description: 'Password change successful',\n      },\n      password_reset: {\n        value: 'Password successfully reset',\n        description: 'Password reset successful',\n      },\n      logout: {\n        value: 'User logged out successfully!',\n        description: 'Logout successful',\n      },\n      verification_sent: {\n        value: 'Verification email sent!',\n        description: 'Verification email resent successfully',\n      },\n    },\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutDto.html":{"url":"classes/LogoutDto.html","title":"class - LogoutDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/logout.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID to logout', example: 'clm1234567890abcdef', format: 'uuid'})@IsString()@IsNotEmpty({message: 'User ID is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/logout.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class LogoutDto {\n  @ApiProperty({\n    description: 'User ID to logout',\n    example: 'clm1234567890abcdef',\n    format: 'uuid',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'User ID is required' })\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_imports\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nQueueModule\n\nQueueModule\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nQueueModule->MailModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            QueueModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { QueueModule } from 'src/queue/queue.module';\nimport { MailProcessor } from './mail.processor';\nimport { MailService } from './mail.service';\n\n@Module({\n  imports: [\n    //import queue module\n    QueueModule,\n    //setup mailer module\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        transport: {\n          host: config.get('EMAIL_HOST') as string,\n          port: config.get('EMAIL_PORT') as number,\n          auth: {\n            user: config.get('EMAIL_USER') as string,\n            pass: config.get('EMAIL_PASS') as string,\n          },\n        },\n        defaults: {\n          from: `\"No Reply - console.log\" ('EMAIL_FROM')}>`,\n        },\n        template: {\n          dir: join(process.cwd(), 'src', 'mail', 'templates'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n    }),\n  ],\n  //inject mail service and processors\n  providers: [MailService, MailProcessor],\n  //export for use in other services\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MailProcessor.html":{"url":"classes/MailProcessor.html","title":"class - MailProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MailProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.processor.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: MailJob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.processor.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                            MailJob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { NotFoundException } from '@nestjs/common';\nimport { Job } from 'bullmq';\n\nexport type VerificationMailData = {\n  type: 'verification';\n  to: string;\n  userName: string;\n  verificationLink: string;\n  year: number;\n};\n\nexport type PasswordResetMailData = {\n  type: 'password_reset';\n  to: string;\n  name: string;\n  resetUrl: string;\n};\n\nexport type MailJobData = VerificationMailData | PasswordResetMailData;\n\n// Define job types with their corresponding data\nexport type MailJob =\n  | Job\n  | Job;\n\n//define processor and set concurrency(can send 10 email at a time) at 10\n@Processor('mailer', { concurrency: 10 })\nexport class MailProcessor extends WorkerHost {\n  constructor(private mailerService: MailerService) {\n    super();\n  }\n  //use process for job process\n  async process(job: MailJob): Promise {\n    switch (job.name) {\n      case 'account-verify-email': {\n        if (job.data.type !== 'verification') {\n          throw new Error('Invalid data type for verification email');\n        }\n        return this.mailerService.sendMail({\n          to: job.data.to,\n          subject: 'Verify Your Email!',\n          template: 'account-verify.hbs',\n          context: {\n            userName: job.data.userName,\n            verificationLink: job.data.verificationLink,\n            year: job.data.year,\n          },\n        });\n      }\n\n      case 'reset-password-email': {\n        if (job.data.type !== 'password_reset') {\n          throw new Error('Invalid data type for password reset email');\n        }\n        return this.mailerService.sendMail({\n          to: job.data.to,\n          subject: 'Password Reset Request!',\n          template: 'password-reset.hbs',\n          context: {\n            userName: job.data.name,\n            verificationLink: job.data.resetUrl,\n          },\n        });\n      }\n      //throw error if not match job\n      default:\n        throw new NotFoundException(`Email job type not found`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                passwordResetEmail\n                            \n                            \n                                    Public\n                                    Async\n                                sendAccountVerifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailQueue: Queue)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        passwordResetEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwordResetEmail(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendAccountVerifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAccountVerifyEmail(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bullmq';\nimport { Injectable } from '@nestjs/common';\nimport { Queue } from 'bullmq';\n\n@Injectable()\nexport class MailService {\n  constructor(\n    //inject mailer service\n    @InjectQueue('mailer') private mailQueue: Queue,\n  ) {}\n\n  //send account verify email\n  public async sendAccountVerifyEmail(data: {\n    to: string;\n    userName: string;\n    verificationLink: string;\n    year: number;\n  }) {\n    await this.mailQueue.add('account-verify-email', data);\n  }\n\n  //send password reset email\n  public async passwordResetEmail(data: {\n    to: string;\n    name: string;\n    resetUrl: string;\n  }) {\n    await this.mailQueue.add('reset-password-email', data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from 'generated/prisma';\n\n@Injectable()\nexport class PrismaService extends PrismaClient {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bullmq';\nimport { Global, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Global()\n@Module({\n  imports: [\n    //configure bullmq\n    BullModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        connection: {\n          host: config.get('REDIS_HOST') as string,\n          password: config.get('REDIS_PASSWORD') as string,\n          port: config.get('REDIS_PORT') as number,\n        },\n      }),\n    }),\n    //register uploader queue with default options\n    BullModule.registerQueue(\n      {\n        name: 'uploader',\n        defaultJobOptions: {\n          removeOnComplete: {\n            age: 3600,\n            count: 1000,\n          },\n          removeOnFail: {\n            age: 86400,\n            count: 100,\n          },\n          attempts: 3,\n          backoff: {\n            delay: 3000,\n            type: 'exponential',\n          },\n        },\n      },\n      //register uploader queue with default options\n      {\n        name: 'mailer',\n        defaultJobOptions: {\n          removeOnComplete: {\n            age: 3600,\n            count: 1000,\n          },\n          removeOnFail: {\n            age: 86400,\n            count: 100,\n          },\n          attempts: 3,\n          backoff: {\n            delay: 3000,\n            type: 'exponential',\n          },\n        },\n      },\n    ),\n  ],\n  //export the configured bullmodule\n  exports: [BullModule],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID associated with the refresh token', example: 'clm1234567890abcdef', format: 'uuid'})@IsString()@IsNotEmpty({message: 'User ID is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT refresh token received during login', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c', format: 'jwt'})@IsString()@IsNotEmpty({message: 'Refresh token is required'})@IsJWT({message: 'Invalid JWT token format'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refresh-token.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, IsJWT } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @ApiProperty({\n    description: 'JWT refresh token received during login',\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n    format: 'jwt',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Refresh token is required' })\n  @IsJWT({ message: 'Invalid JWT token format' })\n  readonly token: string;\n\n  @ApiProperty({\n    description: 'User ID associated with the refresh token',\n    example: 'clm1234567890abcdef',\n    format: 'uuid',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'User ID is required' })\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenResponseDto.html":{"url":"classes/RefreshTokenResponseDto.html","title":"class - RefreshTokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthTokensDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New authentication tokens', type: AuthTokensDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Human-readable message about the refresh result', example: 'New tokens revoked!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicates if the token refresh was successful', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthTokensDto {\n  @ApiProperty({\n    description: 'JWT access token for API authentication',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n    format: 'jwt',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'JWT refresh token for obtaining new access tokens',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.rTCH8Q2iys_2KqVrYhRGkq2KYdG2oUlmfHqR1UHwzUw',\n    format: 'jwt',\n  })\n  refreshToken: string;\n}\n\nexport class LoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the login result',\n    example: 'Logged in successfully!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class SocialLoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the social login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the social login result',\n    examples: {\n      success: {\n        value: 'Google login successful',\n        description: 'Successful Google OAuth login',\n      },\n      existing_user: {\n        value: 'User already registered with email',\n        description: 'User exists with different provider',\n      },\n      already_logged_in: {\n        value: 'User already logged in via google',\n        description: 'User has active session',\n      },\n    },\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens (only present on successful login)',\n    type: AuthTokensDto,\n    required: false,\n  })\n  data?: AuthTokensDto;\n}\n\nexport class RefreshTokenResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the token refresh was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the refresh result',\n    example: 'New tokens revoked!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'New authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class GenericSuccessResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the operation was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the operation result',\n    examples: {\n      account_verified: {\n        value: 'Account email verified',\n        description: 'Email verification successful',\n      },\n      password_reset_sent: {\n        value: 'Password reset email sent',\n        description: 'Password reset email sent successfully',\n      },\n      password_changed: {\n        value: 'Password changed successfully',\n        description: 'Password change successful',\n      },\n      password_reset: {\n        value: 'Password successfully reset',\n        description: 'Password reset successful',\n      },\n      logout: {\n        value: 'User logged out successfully!',\n        description: 'Logout successful',\n      },\n      verification_sent: {\n        value: 'Verification email sent!',\n        description: 'Verification email resent successfully',\n      },\n    },\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterResponseDto.html":{"url":"classes/RegisterResponseDto.html","title":"class - RegisterResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Registration Successful', description: 'Response message'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'Response Meta Description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'Response status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class RegisterResponseDto {\n  @ApiProperty({\n    example: true,\n    description: 'Response status',\n  })\n  success: boolean;\n\n  @ApiProperty({\n    example: 'Registration Successful',\n    description: 'Response message',\n  })\n  message: string;\n\n  @ApiProperty({\n    example: {\n      ip: '0.0.0.0',\n      statusCode: 201,\n      responseTime: '12ms',\n      timestamp: 1754273896331,\n      path: '/auth/register',\n    },\n    description: 'Response Meta Description',\n  })\n  meta: {\n    ip: string;\n    statusCode: string;\n    responseTime: string;\n    timestamp: Date;\n    path: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                provider\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Valid email address for the user account', example: 'john.doe@example.com', format: 'email', uniqueItems: true})@IsEmail({}, {message: 'Please provide a valid email address'})@IsNotEmpty({message: 'Email is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Full name of the user', example: 'John Doe', minLength: 2, maxLength: 100})@IsString()@IsNotEmpty({message: 'Name is required'})@MinLength(2, {message: 'Name must be at least 2 characters long'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for email registration (required only for email provider). Must contain at least 8 characters with uppercase, lowercase, number, and special character', example: 'SecurePassword123!', minLength: 8, format: 'password', required: false})@ValidateIf(o => )@IsString()@IsNotEmpty({message: 'Password is required for email registration'})@MinLength(8, {message: 'Password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authentication provider type', enum: Provider, example: undefined, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique username for the user account', example: 'johndoe123', minLength: 3, maxLength: 30, pattern: '^[a-zA-Z0-9_]+$'})@IsString()@IsNotEmpty({message: 'Username is required'})@MinLength(3, {message: 'Username must be at least 3 characters long'})@Matches(/^[a-zA-Z0-9_]+$/, {message: 'Username can only contain letters, numbers, and underscores'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n  ValidateIf,\n} from 'class-validator';\nimport { Provider } from 'generated/prisma';\n\nexport class RegisterUserDto {\n  @ApiProperty({\n    description: 'Unique username for the user account',\n    example: 'johndoe123',\n    minLength: 3,\n    maxLength: 30,\n    pattern: '^[a-zA-Z0-9_]+$',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Username is required' })\n  @MinLength(3, { message: 'Username must be at least 3 characters long' })\n  @Matches(/^[a-zA-Z0-9_]+$/, {\n    message: 'Username can only contain letters, numbers, and underscores',\n  })\n  readonly username: string;\n\n  @ApiProperty({\n    description: 'Full name of the user',\n    example: 'John Doe',\n    minLength: 2,\n    maxLength: 100,\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Name is required' })\n  @MinLength(2, { message: 'Name must be at least 2 characters long' })\n  readonly name: string;\n\n  @ApiProperty({\n    description: 'Valid email address for the user account',\n    example: 'john.doe@example.com',\n    format: 'email',\n    uniqueItems: true,\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  @IsNotEmpty({ message: 'Email is required' })\n  readonly email: string;\n\n  @ApiProperty({\n    description:\n      'Password for email registration (required only for email provider). Must contain at least 8 characters with uppercase, lowercase, number, and special character',\n    example: 'SecurePassword123!',\n    minLength: 8,\n    format: 'password',\n    required: false,\n  })\n  @ValidateIf((o: RegisterUserDto) => o.provider === 'email')\n  @IsString()\n  @IsNotEmpty({ message: 'Password is required for email registration' })\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character',\n  })\n  readonly password: string;\n\n  @ApiProperty({\n    description: 'Authentication provider type',\n    enum: Provider,\n    example: Provider.email,\n    default: Provider.email,\n  })\n  provider: Provider;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/reset-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                token\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                uid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New password (must be at least 8 characters with uppercase, lowercase, number, and special character)', example: 'NewSecurePassword123!', minLength: 8, format: 'password'})@IsString()@IsNotEmpty({message: 'New password is required'})@MinLength(8, {message: 'New password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'New password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password reset token from the email link', example: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456', minLength: 32})@IsString()@IsNotEmpty({message: 'Reset token is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        uid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID from the reset password email link', example: 'clm1234567890abcdef', format: 'uuid'})@IsString()@IsNotEmpty({message: 'User ID is required'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/reset-password.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches, MinLength } from 'class-validator';\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'User ID from the reset password email link',\n    example: 'clm1234567890abcdef',\n    format: 'uuid',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'User ID is required' })\n  readonly uid: string;\n\n  @ApiProperty({\n    description: 'Password reset token from the email link',\n    example: 'a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456',\n    minLength: 32,\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'Reset token is required' })\n  readonly token: string;\n\n  @ApiProperty({\n    description:\n      'New password (must be at least 8 characters with uppercase, lowercase, number, and special character)',\n    example: 'NewSecurePassword123!',\n    minLength: 8,\n    format: 'password',\n  })\n  @IsString()\n  @IsNotEmpty({ message: 'New password is required' })\n  @MinLength(8, { message: 'New password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'New password must contain at least one uppercase letter, one lowercase letter, one number, and one special character',\n  })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseException.html":{"url":"classes/ResponseException.html","title":"class - ResponseException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response.exception.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/response.exception.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class ResponseException implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response: Response = ctx.getResponse();\n    const request: Request = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorResponse =\n      exception instanceof HttpException ? exception.getResponse() : null;\n\n    // Initialize message and errors\n    let message: string;\n    let errors: { field: string | null; message: string }[] | undefined;\n\n    if (typeof errorResponse === 'string') {\n      message = errorResponse;\n    } else if (errorResponse !== null && typeof errorResponse === 'object') {\n      // errorResponse is an object\n      if ('message' in errorResponse) {\n        const msg = (errorResponse as Error).message;\n\n        if (Array.isArray(msg)) {\n          errors = msg.map((m) => ({\n            field: null,\n            message: m,\n          }));\n          message = 'Validation failed';\n        } else if (typeof msg === 'string') {\n          message = msg;\n        } else {\n          message = exception.message || 'Internal Server Error';\n        }\n      } else if (\n        'error' in errorResponse &&\n        typeof (errorResponse as any).error === 'string'\n      ) {\n        message = (errorResponse as any).error;\n      } else {\n        message = exception.message || 'Internal Server Error';\n      }\n    } else {\n      message = exception.message || 'Internal Server Error';\n    }\n\n    response.status(status).json({\n      success: false,\n      message,\n      errors,\n      meta: {\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseInterceptor.html":{"url":"classes/ResponseInterceptor.html","title":"class - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/response.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/response.interceptor.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { map, Observable } from 'rxjs';\nexport class ResponseInterceptor implements NestInterceptor {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | Promise> {\n    const request: Request = context.switchToHttp().getRequest();\n    const response: Response = context.switchToHttp().getResponse();\n\n    const startTime = Date.now();\n\n    return next.handle().pipe(\n      map((originalRes) => {\n        const statusCode = response.statusCode;\n        const duration = Date.now() - startTime;\n\n        const data = originalRes?.data ?? {};\n        const message = originalRes?.message ?? 'Request Successful';\n        const meta = originalRes?.meta ?? {};\n\n        return {\n          success: true,\n          data,\n          message,\n          meta: {\n            statusCode: statusCode,\n            responseTime: `${duration}ms`,\n            timestamp: Date.now(),\n            path: request.url,\n            ...meta,\n          },\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SocialLoginResponseDto.html":{"url":"classes/SocialLoginResponseDto.html","title":"class - SocialLoginResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SocialLoginResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                data\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthTokensDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Authentication tokens (only present on successful login)', type: AuthTokensDto, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Human-readable message about the social login result', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicates if the social login was successful', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-response.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthTokensDto {\n  @ApiProperty({\n    description: 'JWT access token for API authentication',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',\n    format: 'jwt',\n  })\n  accessToken: string;\n\n  @ApiProperty({\n    description: 'JWT refresh token for obtaining new access tokens',\n    example:\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.rTCH8Q2iys_2KqVrYhRGkq2KYdG2oUlmfHqR1UHwzUw',\n    format: 'jwt',\n  })\n  refreshToken: string;\n}\n\nexport class LoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the login result',\n    example: 'Logged in successfully!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class SocialLoginResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the social login was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the social login result',\n    examples: {\n      success: {\n        value: 'Google login successful',\n        description: 'Successful Google OAuth login',\n      },\n      existing_user: {\n        value: 'User already registered with email',\n        description: 'User exists with different provider',\n      },\n      already_logged_in: {\n        value: 'User already logged in via google',\n        description: 'User has active session',\n      },\n    },\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'Authentication tokens (only present on successful login)',\n    type: AuthTokensDto,\n    required: false,\n  })\n  data?: AuthTokensDto;\n}\n\nexport class RefreshTokenResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the token refresh was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the refresh result',\n    example: 'New tokens revoked!',\n  })\n  message: string;\n\n  @ApiProperty({\n    description: 'New authentication tokens',\n    type: AuthTokensDto,\n  })\n  data: AuthTokensDto;\n}\n\nexport class GenericSuccessResponseDto {\n  @ApiProperty({\n    description: 'Indicates if the operation was successful',\n    example: true,\n  })\n  success: boolean;\n\n  @ApiProperty({\n    description: 'Human-readable message about the operation result',\n    examples: {\n      account_verified: {\n        value: 'Account email verified',\n        description: 'Email verification successful',\n      },\n      password_reset_sent: {\n        value: 'Password reset email sent',\n        description: 'Password reset email sent successfully',\n      },\n      password_changed: {\n        value: 'Password changed successfully',\n        description: 'Password change successful',\n      },\n      password_reset: {\n        value: 'Password successfully reset',\n        description: 'Password reset successful',\n      },\n      logout: {\n        value: 'User logged out successfully!',\n        description: 'Logout successful',\n      },\n      verification_sent: {\n        value: 'Verification email sent!',\n        description: 'Verification email resent successfully',\n      },\n    },\n  })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Modules\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_TaskModule_exports\n\n\n\n\nTaskService \n\nTaskService \n\n\n\nTaskModule\n\nTaskModule\n\nTaskService  -->\n\nTaskModule->TaskService \n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TaskService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Logger, Module } from '@nestjs/common';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TaskService } from './task.service';\n\n@Module({\n  imports: [ScheduleModule.forRoot()],\n  providers: [\n    {\n      provide: 'LOGGER',\n      useFactory: () => new Logger(TaskService.name),\n    },\n    TaskService,\n  ],\n  exports: [TaskService],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDeleteUnVerifiedUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/task/task.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRefreshToken()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_WEEK, {name: 'expired-token-remove', timeZone: 'Asia/Dhaka'})\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDeleteUnVerifiedUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteUnVerifiedUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_10_SECONDS, {name: 'delete-user', timeZone: 'Asia/Dhaka'})\n                \n            \n\n                    \n                        \n                            Defined in src/task/task.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class TaskService {\n  constructor(\n    //inject prisma\n    private prisma: PrismaService,\n    //inject custom made logger service\n    @Inject('LOGGER') private readonly logger: Logger,\n  ) {}\n\n  //added cron job which will run every 12 hours\n  @Cron(CronExpression.EVERY_10_SECONDS, {\n    name: 'delete-user',\n    timeZone: 'Asia/Dhaka',\n  })\n  //soft delete user\n  public async softDeleteUnVerifiedUser() {\n    const result = await this.prisma.user.updateMany({\n      where: {\n        emailVerified: false,\n        isDeleted: false,\n      },\n      data: {\n        isDeleted: true,\n      },\n    });\n    this.logger.debug(`${result.count} unverified users deleted from database`);\n  }\n\n  @Cron(CronExpression.EVERY_WEEK, {\n    name: 'expired-token-remove',\n    timeZone: 'Asia/Dhaka',\n  })\n  public async removeRefreshToken() {\n    const expiredUsers = await this.prisma.user.findMany({\n      where: {\n        refreshToken: {\n          not: null,\n        },\n        refreshTokenExp: {\n          lt: new Date(),\n        },\n      },\n    });\n    await Promise.all([\n      expiredUsers.map(async (user) => {\n        return this.prisma.user.update({\n          where: {\n            id: user.id,\n          },\n          data: {\n            refreshToken: null,\n            refreshTokenExp: null,\n          },\n        });\n      }),\n    ]);\n    this.logger.debug(`${expiredUsers.length} users refresh token reset`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(RegisterUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailVerified\n                            \n                            \n                                    \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                refreshTokenExp\n                            \n                            \n                                    \n                                    \n                                resetToken\n                            \n                            \n                                    \n                                    \n                                resetTokenExp\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                verifyToken\n                            \n                            \n                                    \n                                    \n                                verifyTokenExp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshTokenExp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        resetToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        resetTokenExp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(UserRole)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        verifyToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        verifyTokenExp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport {\n  IsBoolean,\n  IsDate,\n  IsEnum,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { UserRole } from 'generated/prisma';\nimport { RegisterUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(RegisterUserDto) {\n  @IsEnum(UserRole)\n  @IsOptional()\n  role: UserRole;\n\n  @IsString()\n  @IsOptional()\n  refreshToken: string | null;\n\n  @IsDate()\n  @IsOptional()\n  refreshTokenExp: Date | null;\n\n  @IsString()\n  @IsOptional()\n  verifyToken: string | null;\n\n  @IsDate()\n  @IsOptional()\n  verifyTokenExp: Date | null;\n\n  @IsString()\n  @IsOptional()\n  resetToken: string | null;\n\n  @IsDate()\n  @IsOptional()\n  resetTokenExp: Date | null;\n\n  @IsBoolean()\n  @IsOptional()\n  isDeleted: boolean;\n  @IsBoolean()\n  @IsOptional()\n  emailVerified: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { S3Client } from '@aws-sdk/client-s3';\nimport { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UploadProcessor } from './upload.processor';\nimport { UploadService } from './upload.service';\n\n@Module({\n  imports: [],\n  providers: [\n    UploadService,\n    UploadProcessor,\n    {\n      provide: 'AWS_S3',\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return new S3Client({\n          region: config.get('AWS_REGION') as string,\n          credentials: {\n            accessKeyId: config.get('AWS_ACCESS_KEY_ID') as string,\n            secretAccessKey: config.get(\n              'AWS_SECRET_ACCESS_KEY',\n            ) as string,\n          },\n        });\n      },\n    },\n  ],\n  exports: [UploadService],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadProcessor.html":{"url":"classes/UploadProcessor.html","title":"class - UploadProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client)\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.processor.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                        \n                    process(job: Job)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.processor.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                job\n                                            \n                                                        Job\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { Processor, WorkerHost } from '@nestjs/bullmq';\nimport { Inject, RequestTimeoutException } from '@nestjs/common';\nimport { Job } from 'bullmq';\n\n@Processor('uploader')\nexport class UploadProcessor extends WorkerHost {\n  constructor(\n    //inject aws service\n    @Inject('AWS_S3') private readonly s3: S3Client,\n  ) {\n    super();\n  }\n\n  async process(\n    job: Job,\n  ): Promise {\n    const { data } = job;\n    //upload to s3\n    try {\n      const command = new PutObjectCommand({\n        Bucket: data.bucketName,\n        Key: data.key,\n        Body: Buffer.from(data.buffer, 'base64'),\n        ContentType: data.mimeType,\n      });\n      await this.s3.send(command);\n      return data.key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                cloudfrontUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                enqueueUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                    Public\n                                    Async\n                                uploadAndGetUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadQueue: Queue, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/upload/upload.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        enqueueUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    enqueueUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(fileName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadAndGetUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadAndGetUrl(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cloudfrontUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/upload/upload.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bullmq';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Queue } from 'bullmq';\nimport * as path from 'path';\nimport { Util } from 'src/utils/util';\n\n@Injectable()\nexport class UploadService {\n  private readonly bucketName: string;\n  private readonly cloudfrontUrl: string;\n  constructor(\n    //inject bullmq service\n    @InjectQueue('uploader') private readonly uploadQueue: Queue,\n    //inject config service\n    private readonly config: ConfigService,\n  ) {\n    //cloudfront url\n    this.cloudfrontUrl = this.config.get(\n      'AWS_CLOUDFRONT_URL',\n    ) as string;\n    //bucket name\n    this.bucketName = this.config.get('AWS_PUBLIC_BUCKET') as string;\n  }\n\n  //file uploader queue method\n  private async enqueueUpload(file: Express.Multer.File): Promise {\n    //check mime type\n    if (\n      !['image/gif', 'image/jpg', 'image/jpeg', 'image/png'].includes(\n        file.mimetype,\n      )\n    ) {\n      throw new BadRequestException('Mime type not supported');\n    }\n    //generate key\n    const key = this.generateFileName(file.originalname);\n    await this.uploadQueue.add('upload-image', {\n      buffer: file.buffer.toString('base64'),\n      mimeType: file.mimetype,\n      bucketName: this.bucketName,\n      key,\n    });\n    return key;\n  }\n\n  //generate unique filenames\n  private generateFileName(fileName: string): string {\n    const uuid = Util.genToken(16);\n    const ext = path.extname(fileName);\n    return `${Date.now()}-${uuid}${ext}`;\n  }\n\n  //get cloudfront url\n  public async uploadAndGetUrl(file: Express.Multer.File): Promise {\n    const fileName = await this.enqueueUpload(file);\n    return `${this.cloudfrontUrl}/${fileName}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Util.html":{"url":"classes/Util.html","title":"class - Util","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Util\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/util.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                genToken\n                            \n                            \n                                    Static\n                                hash\n                            \n                            \n                                    Static\n                                match\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        genToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    genToken(byte: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/util.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                byte\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    32\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(text: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/util.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        match\n                        \n                    \n                \n            \n            \n                \n                        \n                    match(text: string | Buffer, hashed: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/util.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hashed\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as argon from 'argon2';\nimport { randomBytes } from 'crypto';\n\nexport class Util {\n  public static hash(text: string | Buffer): Promise {\n    return argon.hash(text);\n  }\n\n  public static match(text: string | Buffer, hashed: string): Promise {\n    return argon.verify(hashed, text);\n  }\n\n  public static genToken(byte: number = 32): string {\n    return randomBytes(byte).toString('hex');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/auth/dto/account-verify.dto.ts\n            \n            class\n            AccountVerifyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-error.dto.ts\n            \n            class\n            ErrorFieldDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-error.dto.ts\n            \n            class\n            ErrorMetaDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-error.dto.ts\n            \n            class\n            ErrorResponseDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-response.dto.ts\n            \n            class\n            AuthTokensDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-response.dto.ts\n            \n            class\n            GenericSuccessResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-response.dto.ts\n            \n            class\n            LoginResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-response.dto.ts\n            \n            class\n            RefreshTokenResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-response.dto.ts\n            \n            class\n            SocialLoginResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/forget-password.dto.ts\n            \n            class\n            ForgetPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/github-login.dto.ts\n            \n            class\n            GithubLoginDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/google-login.dto.ts\n            \n            class\n            GoogleLoginDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/logout.dto.ts\n            \n            class\n            LogoutDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-response.dto.ts\n            \n            class\n            RegisterResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/strategies/github.strategy.ts\n            \n            injectable\n            GithubStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-access.strategy.ts\n            \n            injectable\n            JwtAccessStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/types/index.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/response.exception.ts\n            \n            class\n            ResponseException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/response.interceptor.ts\n            \n            class\n            ResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mail/mail.processor.ts\n            \n            class\n            MailProcessor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            MailJob\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            MailJobData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            PasswordResetMailData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mail/mail.processor.ts\n            \n            type alias\n            VerificationMailData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/upload/upload.processor.ts\n            \n            class\n            UploadProcessor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/utils/system-info.ts\n            \n            function\n            formatBytes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/system-info.ts\n            \n            function\n            formatUptime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/utils/system-info.ts\n            \n            function\n            getSystemInfoJson\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/util.ts\n            \n            class\n            Util\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.858.0\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/bullmq : ^11.0.3\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/throttler : ^6.4.0\n        \n            @prisma/client : ^6.13.0\n        \n            argon2 : ^0.43.1\n        \n            aws-sdk : ^2.1692.0\n        \n            bullmq : ^5.56.9\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            compression : ^1.8.1\n        \n            handlebars : ^4.7.8\n        \n            helmet : ^8.1.0\n        \n            install : ^0.13.0\n        \n            nodemailer : ^7.0.5\n        \n            passport : ^0.7.0\n        \n            passport-github2 : ^0.1.12\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            formatBytes   (src/.../system-info.ts)\n                        \n                        \n                            formatUptime   (src/.../system-info.ts)\n                        \n                        \n                            getSystemInfoJson   (src/.../system-info.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/system-info.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatBytes\n                        \n                    \n                \n            \n            \n                \nformatBytes(bytes: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                bytes\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatUptime\n                        \n                    \n                \n            \n            \n                \nformatUptime(seconds: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                seconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSystemInfoJson\n                        \n                    \n                \n            \n            \n                \ngetSystemInfoJson()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📌 Project Overview\nConsole.Log - A portal for developer - where users can post blogs, tech news, tech topics, tech suggestions, upvote/downvote, reply to post, reply to user.\n🎯 Goals & Objectives\nThe goal was to create a forum/platform only for developer. That will help to develop networking, help each other with valuable knowledge, post new tech news/blogs.\n🛠️ Tech Stack\n\nFrontend: NextJS\nBackend: NestJS, PostgreSQL, Prisma, BullMQ, JWT\n\n🚀 Features\n\n...\n...\n\n🧱 Challenges Faced\n\nBuffer serialization problem with BullMQ: Binary data got corrupted during file uploads.\n\n🧠 How I Overcame Them\n\nDiscovered BullMQ doesn’t handle Buffer well, so I converted it to base64 before queueing and decoded it in the processor\n\n📚 Key Learnings\n\n...\n...\n\n📷 Screenshots / Diagrams\n(Optional)\n🚧 Future Improvements\n\n...\n\n✅ Conclusion\nA quick wrap-up...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_exports\n\n\n\ncluster_TaskModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UploadModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nQueueModule->MailModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nTaskService \n\nTaskService \n\nTaskService  -->\n\nTaskModule->TaskService \n\n\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAuthModule -->\n\nUploadModule->AuthModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGithubStrategy\n\nGithubStrategy\n\nAuthModule -->\n\nGithubStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtAccessStrategy\n\nJwtAccessStrategy\n\nAuthModule -->\n\nJwtAccessStrategy->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MailJob   (src/.../mail.processor.ts)\n                        \n                        \n                            MailJobData   (src/.../mail.processor.ts)\n                        \n                        \n                            PasswordResetMailData   (src/.../mail.processor.ts)\n                        \n                        \n                            VerificationMailData   (src/.../mail.processor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/mail/mail.processor.ts\n    \n    \n        \n            \n                \n                    \n                    MailJob\n                \n            \n            \n                \n                        Job | Job\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MailJobData\n                \n            \n            \n                \n                        VerificationMailData | PasswordResetMailData\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PasswordResetMailData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    VerificationMailData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
